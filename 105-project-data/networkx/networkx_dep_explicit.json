{
  "@schemaVersion" : "1.0",
  "name" : "networkx_und",
  "variables" : [ "networkx.algorithms.traversal.__init___py", "networkx.algorithms.wiener_py", "networkx.algorithms.connectivity.kcutsets_py", "networkx.algorithms.assortativity.tests.test_correlation_py", "networkx.algorithms.flow.maxflow_py", "networkx.algorithms.connectivity.stoerwagner_py", "networkx.algorithms.connectivity.__init___py", "networkx.generators.tests.test_harary_graph_py", "networkx.algorithms.flow.preflowpush_py", "networkx.algorithms.centrality.__init___py", "networkx.algorithms.flow.__init___py", "networkx.algorithms.flow.capacityscaling_py", "networkx.algorithms.isomorphism.vf2userfunc_py", "networkx.classes.__init___py", "networkx.algorithms.euler_py", "networkx.classes.tests.test_multigraph_py", "networkx.algorithms.traversal.beamsearch_py", "networkx.algorithms.coloring.greedy_coloring_py", "networkx.algorithms.distance_regular_py", "networkx.algorithms.flow.gomory_hu_py", "networkx.algorithms.approximation.dominating_set_py", "networkx.classes.tests.test_digraph_py", "networkx.algorithms.tree.branchings_py", "networkx.generators.random_graphs_py", "networkx.algorithms.efficiency_py", "networkx.algorithms.components.connected_py", "networkx.algorithms.connectivity.cuts_py", "networkx.algorithms.isomorphism.temporalisomorphvf2_py", "networkx.algorithms.assortativity.tests.test_mixing_py", "networkx.algorithms.connectivity.connectivity_py", "networkx.classes.tests.test_special_py", "networkx.algorithms.connectivity.disjoint_paths_py", "networkx.algorithms.reciprocity_py", "networkx.algorithms.flow.shortestaugmentingpath_py", "networkx.classes.ordered_py", "networkx.algorithms.approximation.ramsey_py", "networkx.drawing.__init___py", "networkx.classes.tests.test_multidigraph_py", "networkx.algorithms.components.__init___py", "networkx.algorithms.tree.__init___py", "networkx.classes.tests.test_digraph_historical_py", "networkx.algorithms.assortativity.tests.test_pairs_py", "networkx.classes.tests.test_graph_historical_py", "networkx.algorithms.dominating_py", "networkx.convert_py", "networkx.algorithms.link_analysis.pagerank_alg_py", "doc.release.contribs_py", "networkx.algorithms.bipartite.tests.test_spectral_bipartivity_py", "networkx.algorithms.tests.test_chordal_py", "networkx.readwrite.graphml_py", "networkx.algorithms.centrality.tests.test_second_order_centrality_py", "networkx.algorithms.tests.test_threshold_py", "networkx.linalg.graphmatrix_py", "networkx.algorithms.components.tests.test_subgraph_copies_py", "examples.graph.plot_roget_py", "networkx.algorithms.operators.tests.test_binary_py", "networkx.algorithms.tests.test_simple_paths_py", "networkx.algorithms.approximation.tests.test_connectivity_py", "networkx.generators.tests.test_ego_py", "networkx.readwrite.tests.test_yaml_py", "networkx.algorithms.connectivity.utils_py", "networkx.algorithms.isomorphism.tests.test_vf2userfunc_py", "networkx.algorithms.centrality.betweenness_subset_py", "networkx.algorithms.tests.test_chains_py", "networkx.algorithms.centrality.flow_matrix_py", "networkx.readwrite.json_graph.cytoscape_py", "networkx.algorithms.tests.test_reciprocity_py", "networkx.algorithms.chains_py", "networkx.generators.tests.test_random_graphs_py", "examples.graph.plot_napoleon_russian_campaign_py", "networkx.algorithms.minors_py", "networkx.algorithms.tests.test_minors_py", "networkx.algorithms.bipartite.tests.test_redundancy_py", "networkx.generators.line_py", "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset_py", "networkx.tests.test_convert_numpy_py", "networkx.algorithms.components.tests.test_connected_py", "networkx.classes.tests.test_subgraphviews_py", "networkx.algorithms.matching_py", "networkx.algorithms.assortativity.tests.test_connectivity_py", "networkx.algorithms.smetric_py", "networkx.algorithms.community.tests.test_asyn_fluid_py", "networkx.generators.tests.test_random_clustered_py", "networkx.algorithms.tests.test_sparsifiers_py", "networkx.algorithms.community.tests.test_quality_py", "networkx.generators.tests.test_joint_degree_seq_py", "examples.algorithms.rcm_py", "networkx.algorithms.flow.boykovkolmogorov_py", "networkx.algorithms.tests.test_matching_py", "networkx.algorithms.bipartite.tests.test_generators_py", "networkx.drawing.nx_agraph_py", "networkx.algorithms.centrality.tests.test_dispersion_py", "networkx.relabel_py", "networkx.algorithms.components.tests.test_strongly_connected_py", "networkx.classes.tests.test_coreviews_py", "networkx.algorithms.shortest_paths.unweighted_py", "examples.drawing.plot_circular_tree_py", "networkx.algorithms.centrality.betweenness_py", "networkx.algorithms.shortest_paths.astar_py", "networkx.readwrite.adjlist_py", "networkx.algorithms.centrality.current_flow_closeness_py", "networkx.classes.graph_py", "networkx.algorithms.community.community_utils_py", "networkx.readwrite.tests.test_p2g_py", "examples.graph.plot_football_py", "networkx.utils.decorators_py", "networkx.algorithms.tests.test_isolate_py", "examples.basic.plot_properties_py", "networkx.generators.tests.test_duplication_py", "networkx.algorithms.centrality.katz_py", "networkx.tests.test_all_random_functions_py", "networkx.algorithms.components.tests.test_semiconnected_py", "networkx.classes.tests.test_graph_py", "networkx.algorithms.planarity_py", "networkx.algorithms.link_analysis.hits_alg_py", "networkx.readwrite.__init___py", "networkx.algorithms.centrality.harmonic_py", "networkx.readwrite.tests.test_gexf_py", "networkx.algorithms.community.tests.test_modularity_max_py", "examples.graph.plot_erdos_renyi_py", "networkx.algorithms.components.tests.test_weakly_connected_py", "tools.gitwash_dumper_py", "networkx.algorithms.traversal.edgebfs_py", "examples.drawing.plot_random_geometric_graph_py", "networkx.generators.joint_degree_seq_py", "networkx.algorithms.flow.dinitz_alg_py", "networkx.classes.tests.test_graphviews_py", "networkx.algorithms.link_prediction_py", "examples.drawing.plot_degree_histogram_py", "networkx.algorithms.bridges_py", "networkx.algorithms.link_analysis.__init___py", "networkx.generators.tests.test_intersection_py", "networkx.algorithms.community.__init___py", "networkx.algorithms.voronoi_py", "networkx.utils.heaps_py", "networkx.algorithms.community.tests.test_kernighan_lin_py", "examples.graph.atlas2_py", "networkx.readwrite.tests.test_sparse6_py", "networkx.algorithms.hybrid_py", "networkx.algorithms.tests.test_link_prediction_py", "examples.drawing.plot_ego_graph_py", "networkx.generators.harary_graph_py", "networkx.algorithms.approximation.independent_set_py", "networkx.algorithms.connectivity.tests.test_kcutsets_py", "networkx.classes.multigraph_py", "networkx.algorithms.shortest_paths.tests.test_unweighted_py", "examples.advanced.plot_eigenvalues_py", "networkx.algorithms.approximation.treewidth_py", "networkx.algorithms.node_classification.tests.test_local_and_global_consistency_py", "networkx.algorithms.centrality.tests.test_load_centrality_py", "networkx.readwrite.tests.test_graphml_py", "networkx.algorithms.tests.test_structuralholes_py", "networkx.algorithms.community.tests.test_kclique_py", "networkx.utils.union_find_py", "examples.drawing.plot_unix_email_py", "networkx.algorithms.traversal.tests.test_dfs_py", "examples.jit.plot_rgraph_py", "networkx.generators.stochastic_py", "networkx.algorithms.approximation.clustering_coefficient_py", "networkx.algorithms.connectivity.tests.test_edge_kcomponents_py", "networkx.generators.tests.test_geometric_py", "networkx.algorithms.shortest_paths.tests.test_dense_py", "networkx.algorithms.bipartite.basic_py", "networkx.generators.triads_py", "networkx.algorithms.centrality.eigenvector_py", "networkx.algorithms.tree.tests.test_operations_py", "networkx.algorithms.community.centrality_py", "networkx.utils.tests.test_decorators_py", "examples.drawing.plot_node_colormap_py", "networkx.algorithms.flow.edmondskarp_py", "networkx.algorithms.traversal.tests.test_bfs_py", "examples.javascript.force_py", "networkx.drawing.layout_py", "networkx.algorithms.bipartite.tests.test_edgelist_py", "networkx.testing.tests.test_utils_py", "networkx.generators.tests.test_expanders_py", "networkx.algorithms.shortest_paths.tests.test_astar_py", "networkx.algorithms.approximation.tests.test_treewidth_py", "networkx.algorithms.tests.test_cuts_py", "networkx.linalg.attrmatrix_py", "networkx.algorithms.communicability_alg_py", "networkx.algorithms.tests.test_vitality_py", "networkx.testing.__init___py", "networkx.algorithms.centrality.tests.test_betweenness_centrality_py", "examples.algorithms.plot_blockmodel_py", "networkx.algorithms.components.weakly_connected_py", "networkx.algorithms.traversal.tests.test_beamsearch_py", "examples.drawing.plot_lanl_routes_py", "networkx.generators.tests.test_line_py", "networkx.algorithms.bipartite.cluster_py", "networkx.algorithms.flow.tests.test_gomory_hu_py", "networkx.generators.social_py", "networkx.algorithms.shortest_paths.generic_py", "networkx.algorithms.approximation.tests.test_ramsey_py", "networkx.algorithms.tests.test_covering_py", "networkx.algorithms.coloring.greedy_coloring_with_interchange_py", "networkx.linalg.tests.test_spectrum_py", "networkx.classes.digraph_py", "networkx.algorithms.components.biconnected_py", "examples.drawing.plot_knuth_miles_py", "networkx.algorithms.tests.test_hierarchy_py", "examples.drawing.plot_directed_py", "networkx.algorithms.bipartite.centrality_py", "networkx.readwrite.json_graph.tree_py", "setup_py", "networkx.algorithms.connectivity.tests.test_stoer_wagner_py", "networkx.generators.tests.test_directed_py", "networkx.algorithms.link_analysis.tests.test_pagerank_py", "networkx.algorithms.bipartite.matching_py", "networkx.algorithms.tests.test_core_py", "networkx.algorithms.cluster_py", "networkx.linalg.tests.test_algebraic_connectivity_py", "networkx.algorithms.tests.test_mis_py", "networkx.algorithms.components.attracting_py", "examples.drawing.plot_house_with_colors_py", "networkx.algorithms.connectivity.edge_augmentation_py", "networkx.algorithms.tests.test_euler_py", "networkx.generators.tests.test_community_py", "networkx.algorithms.approximation.connectivity_py", "networkx.readwrite.gpickle_py", "networkx.algorithms.flow.mincost_py", "networkx.utils.tests.test_unionfind_py", "networkx.generators.ego_py", "networkx.algorithms.link_analysis.tests.test_hits_py", "networkx.algorithms.bipartite.projection_py", "networkx.algorithms.swap_py", "networkx.readwrite.json_graph.tests.test_node_link_py", "networkx.algorithms.centrality.tests.test_subgraph_py", "networkx.algorithms.tree.tests.test_recognition_py", "networkx.algorithms.community.kclique_py", "networkx.utils.tests.test_rcm_py", "examples.drawing.plot_four_grids_py", "networkx.algorithms.flow.tests.test_mincost_py", "networkx.algorithms.tests.test_wiener_py", "examples.subclass.plot_printgraph_py", "networkx.classes.tests.test_filters_py", "networkx.algorithms.assortativity.tests.test_neighbor_degree_py", "networkx.readwrite.graph6_py", "networkx.tests.test_py", "networkx.generators.tests.test_classic_py", "networkx.algorithms.node_classification.tests.test_harmonic_function_py", "networkx.algorithms.approximation.tests.test_vertex_cover_py", "networkx.algorithms.tests.test_communicability_py", "networkx.algorithms.centrality.dispersion_py", "networkx.linalg.__init___py", "networkx.algorithms.tree.mst_py", "networkx.readwrite.tests.test_pajek_py", "examples.drawing.plot_edge_colormap_py", "networkx.algorithms.flow.networksimplex_py", "networkx.algorithms.tests.test_triads_py", "examples.subclass.plot_antigraph_py", "networkx.generators.mycielski_py", "networkx.readwrite.json_graph.tests.test_jit_py", "networkx.tests.test_convert_scipy_py", "networkx.algorithms.tests.test_boundary_py", "networkx.algorithms.bipartite.edgelist_py", "networkx.algorithms.tests.test_cluster_py", "networkx.algorithms.centrality.degree_alg_py", "networkx.generators.tests.test_spectral_graph_forge_py", "networkx.algorithms.tree.tests.test_coding_py", "networkx.algorithms.chordal_py", "networkx.linalg.tests.test_laplacian_py", "examples.drawing.plot_atlas_py", "networkx.algorithms.hierarchy_py", "networkx.tests.test_convert_py", "networkx.algorithms.tests.test_dominance_py", "examples.pygraphviz.pygraphviz_simple_py", "networkx.generators.__init___py", "networkx.algorithms.bipartite.tests.test_basic_py", "networkx.readwrite.json_graph.tests.test_adjacency_py", "networkx.algorithms.core_py", "networkx.release_py", "networkx.algorithms.sparsifiers_py", "networkx.algorithms.bipartite.covering_py", "networkx.algorithms.tests.test_clique_py", "networkx.algorithms.centrality.subgraph_alg_py", "networkx.readwrite.json_graph.tests.test_tree_py", "networkx.generators.tests.test_trees_py", "examples.drawing.plot_giant_component_py", "networkx.algorithms.distance_measures_py", "examples.drawing.plot_sampson_py", "networkx.generators.community_py", "networkx.algorithms.bipartite.generators_py", "networkx.readwrite.tests.test_shp_py", "networkx.tests.test_exceptions_py", "networkx.algorithms.shortest_paths.weighted_py", "networkx.algorithms.tree.tests.test_mst_py", "networkx.generators.tests.test_small_py", "networkx.algorithms.community.label_propagation_py", "networkx.algorithms.tests.test_swap_py", "networkx.algorithms.community.tests.test_utils_py", "networkx.linalg.algebraicconnectivity_py", "examples.drawing.plot_chess_masters_py", "networkx.utils.tests.test_mapped_queue_py", "examples.basic.plot_read_write_py", "networkx.algorithms.bipartite.tests.test_covering_py", "networkx.algorithms.connectivity.kcomponents_py", "networkx.algorithms.operators.unary_py", "networkx.algorithms.approximation.vertex_cover_py", "networkx.algorithms.tree.recognition_py", "networkx.algorithms.community.modularity_max_py", "networkx.readwrite.multiline_adjlist_py", "networkx.generators.random_clustered_py", "networkx.readwrite.sparse6_py", "networkx.algorithms.coloring.__init___py", "networkx.algorithms.connectivity.tests.test_cuts_py", "examples.pygraphviz.write_dotfile_py", "networkx.algorithms.tree.operations_py", "networkx.algorithms.assortativity.neighbor_degree_py", "networkx.drawing.tests.test_layout_py", "networkx.tests.test_relabel_py", "networkx.algorithms.similarity_py", "networkx.algorithms.approximation.matching_py", "networkx.algorithms.tree.coding_py", "networkx.readwrite.json_graph.tests.test_cytoscape_py", "networkx.algorithms.community.community_generators_py", "networkx.classes.tests.test_function_py", "networkx.readwrite.pajek_py", "networkx.algorithms.isomorphism.isomorphvf2_py", "examples.drawing.plot_spectral_grid_py", "networkx.generators.atlas_py", "examples.pygraphviz.pygraphviz_draw_py", "networkx.tests.test_convert_pandas_py", "networkx.generators.geometric_py", "networkx.algorithms.cycles_py", "networkx.algorithms.approximation.tests.test_approx_clust_coeff_py", "networkx.algorithms.centrality.tests.test_katz_centrality_py", "networkx.generators.tests.test_lattice_py", "networkx.classes.reportviews_py", "networkx.algorithms.graphical_py", "networkx.readwrite.p2g_py", "networkx.classes.tests.test_ordered_py", "examples.drawing.plot_weighted_graph_py", "networkx.algorithms.operators.product_py", "examples.pygraphviz.pygraphviz_attributes_py", "networkx.algorithms.tests.test_tournament_py", "networkx.algorithms.approximation.tests.test_independent_set_py", "networkx.generators.expanders_py", "networkx.algorithms.mis_py", "networkx.algorithms.tests.test_efficiency_py", "networkx.readwrite.json_graph.adjacency_py", "networkx.algorithms.community.asyn_fluid_py", "networkx.generators.lattice_py", "networkx.algorithms.flow.utils_py", "networkx.readwrite.leda_py", "examples.drawing.plot_labels_and_colors_py", "networkx.algorithms.shortest_paths.tests.test_generic_py", "networkx.algorithms.bipartite.tests.test_project_py", "networkx.algorithms.tests.test_distance_measures_py", "networkx.generators.duplication_py", "networkx.algorithms.operators.binary_py", "networkx.algorithms.tests.test_dominating_py", "networkx.linalg.modularitymatrix_py", "networkx.algorithms.assortativity.correlation_py", "networkx.readwrite.gexf_py", "networkx.algorithms.cuts_py", "examples.algorithms.beam_search_py", "networkx.algorithms.bipartite.tests.test_cluster_py", "networkx.algorithms.tests.test_dag_py", "networkx.algorithms.centrality.tests.test_current_flow_closeness_py", "networkx.algorithms.tests.test_graphical_py", "networkx.algorithms.connectivity.tests.test_connectivity_py", "networkx.algorithms.operators.__init___py", "networkx.algorithms.threshold_py", "networkx.algorithms.bipartite.__init___py", "networkx.generators.tests.test_nonisomorphic_trees_py", "networkx.drawing.tests.test_pydot_py", "networkx.algorithms.centrality.load_py", "networkx.readwrite.tests.test_leda_py", "networkx.algorithms.dag_py", "examples.drawing.plot_degree_rank_py", "networkx.utils.misc_py", "networkx.algorithms.operators.tests.test_all_py", "networkx.algorithms.bipartite.tests.test_centrality_py", "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2_py", "networkx.algorithms.community.quality_py", "networkx.algorithms.traversal.depth_first_search_py", "networkx.algorithms.community.tests.test_label_propagation_py", "networkx.algorithms.tests.test_distance_regular_py", "networkx.algorithms.traversal.tests.test_edgebfs_py", "networkx.readwrite.json_graph.__init___py", "networkx.algorithms.assortativity.pairs_py", "networkx.generators.degree_seq_py", "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset_py", "networkx.readwrite.tests.test_gpickle_py", "networkx.algorithms.isomorphism.isomorph_py", "networkx.algorithms.operators.tests.test_product_py", "networkx.algorithms.assortativity.connectivity_py", "networkx.algorithms.tests.test_cycles_py", "networkx.algorithms.centrality.tests.test_percolation_centrality_py", "networkx.algorithms.traversal.breadth_first_search_py", "networkx.testing.utils_py", "networkx.algorithms.components.strongly_connected_py", "examples.3d_drawing.mayavi2_spring_py", "networkx.classes.filters_py", "networkx.readwrite.json_graph.node_link_py", "networkx.algorithms.approximation.tests.test_dominating_set_py", "networkx.classes.multidigraph_py", "networkx.algorithms.centrality.tests.test_closeness_centrality_py", "networkx.readwrite.tests.test_edgelist_py", "networkx.algorithms.node_classification.__init___py", "examples.advanced.plot_parallel_betweenness_py", "networkx.algorithms.assortativity.mixing_py", "networkx.algorithms.tests.test_voronoi_py", "networkx.algorithms.centrality.tests.test_degree_centrality_py", "networkx.utils.tests.test_contextmanager_py", "networkx.classes.graphviews_py", "networkx.algorithms.components.semiconnected_py", "examples.graph.plot_degree_sequence_py", "networkx.algorithms.connectivity.tests.test_edge_augmentation_py", "networkx.classes.coreviews_py", "networkx.readwrite.tests.test_graph6_py", "examples.graph.plot_karate_club_py", "networkx.generators.tests.test_atlas_py", "networkx.algorithms.components.tests.test_attracting_py", "networkx.generators.trees_py", "networkx.algorithms.flow.tests.test_maxflow_large_graph_py", "networkx.algorithms.tests.test_bridges_py", "networkx.utils.tests.test_misc_py", "doc.release.report_functions_without_rst_generated_py", "networkx.algorithms.bipartite.tests.test_matrix_py", "networkx.algorithms.tests.test_lowest_common_ancestors_py", "networkx.algorithms.centrality.tests.test_eigenvector_centrality_py", "networkx.utils.random_sequence_py", "networkx.generators.classic_py", "examples.algorithms.plot_davis_club_py", "networkx.algorithms.connectivity.tests.test_disjoint_paths_py", "networkx.algorithms.traversal.tests.test_edgedfs_py", "networkx.readwrite.nx_shp_py", "networkx.algorithms.approximation.__init___py", "networkx.generators.small_py", "networkx.algorithms.approximation.kcomponents_py", "networkx.generators.tests.test_stochastic_py", "networkx.algorithms.isomorphism.tests.test_match_helpers_py", "networkx.algorithms.shortest_paths.__init___py", "networkx.utils.tests.test_random_sequence_py", "doc.conf_py", "networkx.algorithms.approximation.tests.test_clique_py", "networkx.algorithms.tests.test_hybrid_py", "networkx.algorithms.centrality.percolation_py", "networkx.utils.rcm_py", "networkx.algorithms.flow.tests.test_maxflow_py", "examples.advanced.iterated_dynamical_systems_py", "networkx.algorithms.isomorphism.__init___py", "networkx.algorithms.traversal.edgedfs_py", "networkx.algorithms.__init___py", "networkx.generators.tests.test_mycielski_py", "networkx.generators.nonisomorphic_trees_py", "networkx.algorithms.approximation.tests.test_matching_py", "networkx.algorithms.isomorphism.tests.test_isomorphvf2_py", "networkx.readwrite.json_graph.jit_py", "networkx.algorithms.smallworld_py", "networkx.utils.mapped_queue_py", "networkx.algorithms.approximation.clique_py", "networkx.algorithms.bipartite.spectral_py", "networkx.classes.function_py", "networkx.algorithms.community.kernighan_lin_py", "networkx.exception_py", "networkx.utils.contextmanagers_py", "networkx.algorithms.dominance_py", "examples.advanced.plot_heavy_metal_umlaut_py", "networkx.algorithms.shortest_paths.dense_py", "networkx.algorithms.tests.test_richclub_py", "networkx.readwrite.gml_py", "networkx.__init___py", "networkx.generators.intersection_py", "networkx.algorithms.approximation.tests.test_kcomponents_py", "networkx.algorithms.covering_py", "networkx.linalg.tests.test_modularity_py", "networkx.algorithms.richclub_py", "networkx.utils.tests.test_heaps_py", "networkx.algorithms.centrality.current_flow_betweenness_subset_py", "networkx.algorithms.tournament_py", "networkx.algorithms.coloring.tests.test_coloring_py", "networkx.drawing.tests.test_pylab_py", "networkx.utils.__init___py", "networkx.algorithms.connectivity.edge_kcomponents_py", "networkx.algorithms.operators.all_py", "networkx.readwrite.tests.test_gml_py", "networkx.algorithms.bipartite.redundancy_py", "networkx.drawing.nx_pydot_py", "networkx.algorithms.bipartite.tests.test_matching_py", "networkx.linalg.laplacianmatrix_py", "networkx.algorithms.connectivity.tests.test_kcomponents_py", "networkx.algorithms.simple_paths_py", "networkx.algorithms.centrality.current_flow_betweenness_py", "networkx.algorithms.tests.test_planarity_py", "networkx.algorithms.community.tests.test_generators_py", "networkx.generators.spectral_graph_forge_py", "networkx.algorithms.isomorphism.matchhelpers_py", "examples.graph.expected_degree_sequence_py", "networkx.algorithms.node_classification.lgc_py", "networkx.algorithms.vitality_py", "networkx.algorithms.assortativity.tests.base_test_py", "networkx.readwrite.nx_yaml_py", "networkx.algorithms.centrality.tests.test_harmonic_centrality_py", "networkx.algorithms.components.tests.test_biconnected_py", "networkx.tests.__init___py", "networkx.algorithms.shortest_paths.tests.test_weighted_py", "networkx.algorithms.centrality.closeness_py", "networkx.algorithms.triads_py", "networkx.algorithms.centrality.tests.test_reaching_py", "networkx.generators.directed_py", "networkx.linalg.spectrum_py", "examples.drawing.plot_simple_path_py", "networkx.algorithms.node_classification.hmn_py", "networkx.algorithms.tree.tests.test_branchings_py", "networkx.algorithms.approximation.steinertree_py", "networkx.readwrite.edgelist_py", "networkx.convert_matrix_py", "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_py", "networkx.classes.tests.historical_tests_py", "networkx.algorithms.shortest_paths.tests.test_dense_numpy_py", "networkx.algorithms.approximation.tests.test_steinertree_py", "networkx.algorithms.tests.test_smetric_py", "networkx.algorithms.community.tests.test_centrality_py", "networkx.generators.tests.test_triads_py", "examples.graph.words_py", "networkx.algorithms.operators.tests.test_unary_py", "networkx.algorithms.tests.test_smallworld_py", "networkx.readwrite.tests.test_adjlist_py", "networkx.algorithms.boundary_py", "networkx.classes.tests.test_reportviews_py", "networkx.algorithms.centrality.second_order_py", "networkx.algorithms.isomorphism.tests.test_isomorphism_py", "networkx.generators.tests.test_degree_seq_py", "networkx.algorithms.lowest_common_ancestors_py", "examples.applications.circuits_py", "networkx.algorithms.assortativity.__init___py", "networkx.algorithms.structuralholes_py", "networkx.algorithms.clique_py", "networkx.drawing.tests.test_agraph_py", "networkx.algorithms.isolate_py", "networkx.linalg.tests.test_graphmatrix_py", "examples.algorithms.plot_krackhardt_centrality_py", "networkx.algorithms.node_classification.utils_py", "networkx.algorithms.tests.test_similarity_py", "networkx.algorithms.bipartite.matrix_py", "networkx.drawing.nx_pylab_py", "networkx.algorithms.centrality.reaching_py" ],
  "cells" : [ {
    "src" : 0,
    "dest" : 16,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 0,
    "dest" : 122,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 0,
    "dest" : 376,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 0,
    "dest" : 390,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 0,
    "dest" : 444,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 1,
    "dest" : 25,
    "values" : {
      "Import" : 1.0,
      "Call" : 1.0
    }
  }, {
    "src" : 1,
    "dest" : 392,
    "values" : {
      "Import" : 1.0,
      "Call" : 1.0
    }
  }, {
    "src" : 2,
    "dest" : 60,
    "values" : {
      "Call" : 1.0,
      "Import" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 3,
    "dest" : 493,
    "values" : {
      "Inherit" : 1.0,
      "Import From" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 4,
    "dest" : 8,
    "values" : {
      "Import" : 1.0,
      "Import From" : 1.0,
      "Use" : 1.0
    }
  }, {
    "src" : 4,
    "dest" : 33,
    "values" : {
      "Import" : 1.0,
      "Import From" : 1.0,
      "Use" : 1.0
    }
  }, {
    "src" : 4,
    "dest" : 87,
    "values" : {
      "Import" : 1.0,
      "Use" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 4,
    "dest" : 125,
    "values" : {
      "Import" : 1.0,
      "Import From" : 1.0,
      "Use" : 1.0
    }
  }, {
    "src" : 4,
    "dest" : 169,
    "values" : {
      "Import" : 1.0,
      "Use" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 4,
    "dest" : 343,
    "values" : {
      "Import From" : 1.0,
      "Import" : 1.0,
      "Call" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 2,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 5,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 26,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 29,
    "values" : {
      "Import" : 1.0,
      "Set" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 31,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 60,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 215,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 296,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 6,
    "dest" : 476,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 7,
    "dest" : 141,
    "values" : {
      "Import From" : 1.0,
      "Import" : 1.0,
      "Call" : 1.0,
      "Use" : 1.0
    }
  }, {
    "src" : 8,
    "dest" : 343,
    "values" : {
      "Import From" : 1.0,
      "Call" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 62,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 97,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 100,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 109,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 116,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 164,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 243,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 257,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 275,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 367,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 439,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 471,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 485,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 499,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 523,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 9,
    "dest" : 539,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 4,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 8,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 11,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 19,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 33,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 87,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 125,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 169,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 220,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 248,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 10,
    "dest" : 343,
    "values" : {
      "Import From" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 12,
    "dest" : 318,
    "values" : {
      "Inherit" : 1.0,
      "Call" : 1.0,
      "Use" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 13,
    "dest" : 34,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 13,
    "dest" : 101,
    "values" : {
      "Import" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 13,
    "dest" : 144,
    "values" : {
      "Import From" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 13,
    "dest" : 197,
    "values" : {
      "Import From" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 13,
    "dest" : 397,
    "values" : {
      "Import From" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 13,
    "dest" : 455,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 15,
    "dest" : 112,
    "values" : {
      "Inherit" : 1.0,
      "Import From" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 16,
    "dest" : 390,
    "values" : {
      "Import From" : 1.0,
      "Call" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 17,
    "dest" : 195,
    "values" : {
      "Call" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 18,
    "dest" : 279,
    "values" : {
      "Call" : 1.0,
      "Import" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 19,
    "dest" : 169,
    "values" : {
      "Import From" : 1.0,
      "Import" : 1.0,
      "Use" : 1.0
    }
  }, {
    "src" : 19,
    "dest" : 343,
    "values" : {
      "Import" : 1.0,
      "Import From" : 1.0,
      "Call" : 1.0
    }
  }, {
    "src" : 20,
    "dest" : 78,
    "values" : {
      "Import From" : 1.0,
      "Call" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 21,
    "dest" : 112,
    "values" : {
      "Import From" : 1.0,
      "Inherit" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 22,
    "dest" : 299,
    "values" : {
      "Import" : 1.0,
      "Set" : 1.0,
      "Call" : 1.0
    }
  }, {
    "src" : 23,
    "dest" : 382,
    "values" : {
      "Import" : 1.0,
      "Call" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 23,
    "dest" : 424,
    "values" : {
      "Import" : 1.0,
      "Call" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 26,
    "dest" : 60,
    "values" : {
      "Call" : 1.0,
      "Import" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 27,
    "dest" : 318,
    "values" : {
      "Import" : 1.0,
      "Import From" : 1.0,
      "Inherit" : 1.0
    }
  }, {
    "src" : 28,
    "dest" : 493,
    "values" : {
      "Inherit" : 1.0,
      "Import From" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 29,
    "dest" : 60,
    "values" : {
      "Import" : 1.0,
      "Call" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 30,
    "dest" : 15,
    "values" : {
      "Import" : 1.0,
      "Use" : 1.0,
      "Inherit" : 1.0,
      "Import From" : 1.0,
      "Call" : 1.0
    }
  }, {
    "src" : 30,
    "dest" : 21,
    "values" : {
      "Call" : 1.0,
      "Import" : 1.0,
      "Use" : 1.0,
      "Inherit" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 30,
    "dest" : 37,
    "values" : {
      "Inherit" : 1.0,
      "Import" : 1.0,
      "Use" : 1.0,
      "Import From" : 1.0,
      "Call" : 1.0
    }
  }, {
    "src" : 30,
    "dest" : 112,
    "values" : {
      "Use" : 1.0,
      "Import From" : 1.0,
      "Call" : 1.0,
      "Inherit" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 31,
    "dest" : 60,
    "values" : {
      "Import" : 1.0,
      "Import From" : 1.0,
      "Call" : 1.0
    }
  }, {
    "src" : 33,
    "dest" : 169,
    "values" : {
      "Import" : 1.0,
      "Call" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 33,
    "dest" : 343,
    "values" : {
      "Import" : 1.0,
      "Call" : 1.0,
      "Set" : 1.0
    }
  }, {
    "src" : 34,
    "dest" : 101,
    "values" : {
      "Inherit" : 1.0,
      "Import From" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 34,
    "dest" : 144,
    "values" : {
      "Import" : 1.0,
      "Inherit" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 34,
    "dest" : 197,
    "values" : {
      "Import From" : 1.0,
      "Inherit" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 34,
    "dest" : 397,
    "values" : {
      "Import From" : 1.0,
      "Import" : 1.0,
      "Inherit" : 1.0
    }
  }, {
    "src" : 36,
    "dest" : 90,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 36,
    "dest" : 172,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 36,
    "dest" : 480,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 36,
    "dest" : 538,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 37,
    "dest" : 15,
    "values" : {
      "Inherit" : 1.0,
      "Import" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 38,
    "dest" : 25,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 38,
    "dest" : 185,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 38,
    "dest" : 198,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 38,
    "dest" : 213,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 38,
    "dest" : 392,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 38,
    "dest" : 407,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 39,
    "dest" : 22,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 39,
    "dest" : 245,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 39,
    "dest" : 299,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 39,
    "dest" : 307,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 39,
    "dest" : 313,
    "values" : {
      "Import" : 1.0
    }
  }, {
    "src" : 40,
    "dest" : 511,
    "values" : {
      "Inherit" : 1.0,
      "Call" : 1.0,
      "Import" : 1.0,
      "Use" : 1.0,
      "Import From" : 1.0
    }
  }, {
    "src" : 41,
    "dest" : 493,
    "values" : {
      "Import From" : 1.0,
      "Inherit" : 1.0,
      "Import" : 1.0
    }
  }, {
    "src" : 42,
    "dest" : 511,
    "values" : {
      "Inherit" : 1.0,
      "Call" : 1.0,
      "Import" : 1.0,
      "Use" : 1.0,
      "Import From" : 1.0
    }
  } ]
}