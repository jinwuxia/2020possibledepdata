{
  "@schemaVersion" : "1.0",
  "name" : "models\\models-sdsm",
  "variables" : [ "models/official/benchmark/benchmark_uploader.py", "models/official/benchmark/benchmark_uploader_main.py", "models/official/benchmark/__init__.py", "models/official/boosted_trees/data_download.py", "models/official/boosted_trees/train_higgs.py", "models/official/boosted_trees/__init__.py", "models/official/datasets/movielens.py", "models/official/datasets/__init__.py", "models/official/keras_application_models/benchmark_main.py", "models/official/keras_application_models/dataset.py", "models/official/keras_application_models/model_callbacks.py", "models/official/keras_application_models/__init__.py", "models/official/mnist/dataset.py", "models/official/mnist/mnist.py", "models/official/mnist/mnist_eager.py", "models/official/mnist/mnist_tpu.py", "models/official/mnist/__init__.py", "models/official/recommendation/constants.py", "models/official/recommendation/data_pipeline.py", "models/official/recommendation/data_preprocessing.py", "models/official/recommendation/ncf_main.py", "models/official/recommendation/neumf_model.py", "models/official/recommendation/popen_helper.py", "models/official/recommendation/stat_utils.py", "models/official/recommendation/__init__.py", "models/official/resnet/cifar10_download_and_extract.py", "models/official/resnet/cifar10_main.py", "models/official/resnet/estimator_cifar_benchmark.py", "models/official/resnet/imagenet_main.py", "models/official/resnet/imagenet_preprocessing.py", "models/official/resnet/keras/keras_benchmark.py", "models/official/resnet/keras/keras_cifar_benchmark.py", "models/official/resnet/keras/keras_cifar_main.py", "models/official/resnet/keras/keras_common.py", "models/official/resnet/keras/keras_imagenet_benchmark.py", "models/official/resnet/keras/keras_imagenet_main.py", "models/official/resnet/keras/resnet_cifar_model.py", "models/official/resnet/keras/resnet_model.py", "models/official/resnet/keras/__init__.py", "models/official/resnet/resnet_model.py", "models/official/resnet/resnet_run_loop.py", "models/official/resnet/__init__.py", "models/official/transformer/compute_bleu.py", "models/official/transformer/data_download.py", "models/official/transformer/model/attention_layer.py", "models/official/transformer/model/beam_search.py", "models/official/transformer/model/embedding_layer.py", "models/official/transformer/model/ffn_layer.py", "models/official/transformer/model/model_params.py", "models/official/transformer/model/model_utils.py", "models/official/transformer/model/transformer.py", "models/official/transformer/model/__init__.py", "models/official/transformer/transformer_main.py", "models/official/transformer/translate.py", "models/official/transformer/utils/dataset.py", "models/official/transformer/utils/metrics.py", "models/official/transformer/utils/schedule.py", "models/official/transformer/utils/tokenizer.py", "models/official/transformer/utils/__init__.py", "models/official/transformer/__init__.py", "models/official/utils/accelerator/tpu.py", "models/official/utils/accelerator/__init__.py", "models/official/utils/data/file_io.py", "models/official/utils/data/__init__.py", "models/official/utils/export/export.py", "models/official/utils/export/__init__.py", "models/official/utils/flags/core.py", "models/official/utils/flags/_base.py", "models/official/utils/flags/_benchmark.py", "models/official/utils/flags/_conventions.py", "models/official/utils/flags/_device.py", "models/official/utils/flags/_misc.py", "models/official/utils/flags/_performance.py", "models/official/utils/flags/__init__.py", "models/official/utils/logs/cloud_lib.py", "models/official/utils/logs/hooks.py", "models/official/utils/logs/hooks_helper.py", "models/official/utils/logs/logger.py", "models/official/utils/logs/metric_hook.py", "models/official/utils/logs/mlperf_helper.py", "models/official/utils/logs/__init__.py", "models/official/utils/misc/distribution_utils.py", "models/official/utils/misc/model_helpers.py", "models/official/utils/misc/__init__.py", "models/official/utils/testing/integration.py", "models/official/utils/testing/mock_lib.py", "models/official/utils/testing/reference_data.py", "models/official/utils/testing/__init__.py", "models/official/utils/__init__.py", "models/official/wide_deep/census_dataset.py", "models/official/wide_deep/census_main.py", "models/official/wide_deep/movielens_dataset.py", "models/official/wide_deep/movielens_main.py", "models/official/wide_deep/wide_deep_run_loop.py", "models/official/wide_deep/__init__.py", "models/official/__init__.py", "models/research/a3c_blogpost/a3c_cartpole.py", "models/research/adversarial_crypto/train_eval.py", "models/research/adversarial_logit_pairing/adversarial_attack.py", "models/research/adversarial_logit_pairing/datasets/dataset_factory.py", "models/research/adversarial_logit_pairing/datasets/imagenet_input.py", "models/research/adversarial_logit_pairing/datasets/tiny_imagenet_input.py", "models/research/adversarial_logit_pairing/datasets/__init__.py", "models/research/adversarial_logit_pairing/eval.py", "models/research/adversarial_logit_pairing/model_lib.py", "models/research/adversarial_logit_pairing/tiny_imagenet_converter/converter.py", "models/research/adversarial_logit_pairing/train.py", "models/research/adversarial_text/adversarial_losses.py", "models/research/adversarial_text/data/data_utils.py", "models/research/adversarial_text/data/document_generators.py", "models/research/adversarial_text/data/__init__.py", "models/research/adversarial_text/evaluate.py", "models/research/adversarial_text/gen_data.py", "models/research/adversarial_text/gen_vocab.py", "models/research/adversarial_text/graphs.py", "models/research/adversarial_text/inputs.py", "models/research/adversarial_text/layers.py", "models/research/adversarial_text/pretrain.py", "models/research/adversarial_text/train_classifier.py", "models/research/adversarial_text/train_utils.py", "models/research/adversarial_text/__init__.py", "models/research/adv_imagenet_models/eval_on_adversarial.py", "models/research/adv_imagenet_models/imagenet.py", "models/research/adv_imagenet_models/inception_resnet_v2.py", "models/research/attention_ocr/python/common_flags.py", "models/research/attention_ocr/python/datasets/fsns.py", "models/research/attention_ocr/python/datasets/unittest_utils.py", "models/research/attention_ocr/python/datasets/__init__.py", "models/research/attention_ocr/python/data_provider.py", "models/research/attention_ocr/python/demo_inference.py", "models/research/attention_ocr/python/eval.py", "models/research/attention_ocr/python/inception_preprocessing.py", "models/research/attention_ocr/python/metrics.py", "models/research/attention_ocr/python/model.py", "models/research/attention_ocr/python/sequence_layers.py", "models/research/attention_ocr/python/train.py", "models/research/attention_ocr/python/utils.py", "models/research/audioset/mel_features.py", "models/research/audioset/vggish_inference_demo.py", "models/research/audioset/vggish_input.py", "models/research/audioset/vggish_params.py", "models/research/audioset/vggish_postprocess.py", "models/research/audioset/vggish_slim.py", "models/research/audioset/vggish_train_demo.py", "models/research/autoaugment/augmentation_transforms.py", "models/research/autoaugment/custom_ops.py", "models/research/autoaugment/data_utils.py", "models/research/autoaugment/helper_utils.py", "models/research/autoaugment/policies.py", "models/research/autoaugment/shake_drop.py", "models/research/autoaugment/shake_shake.py", "models/research/autoaugment/train_cifar.py", "models/research/autoaugment/wrn.py", "models/research/autoencoder/AdditiveGaussianNoiseAutoencoderRunner.py", "models/research/autoencoder/AutoencoderRunner.py", "models/research/autoencoder/autoencoder_models/Autoencoder.py", "models/research/autoencoder/autoencoder_models/DenoisingAutoencoder.py", "models/research/autoencoder/autoencoder_models/VariationalAutoencoder.py", "models/research/autoencoder/autoencoder_models/__init__.py", "models/research/autoencoder/MaskingNoiseAutoencoderRunner.py", "models/research/autoencoder/VariationalAutoencoderRunner.py", "models/research/autoencoder/__init__.py", "models/research/brain_coder/common/bf.py", "models/research/brain_coder/common/config_lib.py", "models/research/brain_coder/common/reward.py", "models/research/brain_coder/common/rollout.py", "models/research/brain_coder/common/schedules.py", "models/research/brain_coder/common/utils.py", "models/research/brain_coder/single_task/aggregate_experiment_results.py", "models/research/brain_coder/single_task/aggregate_tuning_results.py", "models/research/brain_coder/single_task/code_tasks.py", "models/research/brain_coder/single_task/data.py", "models/research/brain_coder/single_task/defaults.py", "models/research/brain_coder/single_task/ga_lib.py", "models/research/brain_coder/single_task/ga_train.py", "models/research/brain_coder/single_task/misc.py", "models/research/brain_coder/single_task/pg_agent.py", "models/research/brain_coder/single_task/pg_train.py", "models/research/brain_coder/single_task/results_lib.py", "models/research/brain_coder/single_task/run.py", "models/research/brain_coder/single_task/run_eval_tasks.py", "models/research/brain_coder/single_task/test_tasks.py", "models/research/brain_coder/single_task/tune.py", "models/research/cognitive_mapping_and_planning/cfgs/config_cmp.py", "models/research/cognitive_mapping_and_planning/cfgs/config_common.py", "models/research/cognitive_mapping_and_planning/cfgs/config_distill.py", "models/research/cognitive_mapping_and_planning/cfgs/config_vision_baseline.py", "models/research/cognitive_mapping_and_planning/cfgs/__init__.py", "models/research/cognitive_mapping_and_planning/datasets/factory.py", "models/research/cognitive_mapping_and_planning/datasets/nav_env.py", "models/research/cognitive_mapping_and_planning/datasets/nav_env_config.py", "models/research/cognitive_mapping_and_planning/datasets/__init__.py", "models/research/cognitive_mapping_and_planning/render/swiftshader_renderer.py", "models/research/cognitive_mapping_and_planning/render/__init__.py", "models/research/cognitive_mapping_and_planning/scripts/script_distill.py", "models/research/cognitive_mapping_and_planning/scripts/script_env_vis.py", "models/research/cognitive_mapping_and_planning/scripts/script_nav_agent_release.py", "models/research/cognitive_mapping_and_planning/scripts/script_plot_trajectory.py", "models/research/cognitive_mapping_and_planning/scripts/script_preprocess_annoations_S3DIS.py", "models/research/cognitive_mapping_and_planning/scripts/__init__.py", "models/research/cognitive_mapping_and_planning/src/depth_utils.py", "models/research/cognitive_mapping_and_planning/src/file_utils.py", "models/research/cognitive_mapping_and_planning/src/graph_utils.py", "models/research/cognitive_mapping_and_planning/src/map_utils.py", "models/research/cognitive_mapping_and_planning/src/rotation_utils.py", "models/research/cognitive_mapping_and_planning/src/utils.py", "models/research/cognitive_mapping_and_planning/src/__init__.py", "models/research/cognitive_mapping_and_planning/tfcode/cmp.py", "models/research/cognitive_mapping_and_planning/tfcode/cmp_summary.py", "models/research/cognitive_mapping_and_planning/tfcode/cmp_utils.py", "models/research/cognitive_mapping_and_planning/tfcode/nav_utils.py", "models/research/cognitive_mapping_and_planning/tfcode/tf_utils.py", "models/research/cognitive_mapping_and_planning/tfcode/vision_baseline_lstm.py", "models/research/cognitive_mapping_and_planning/tfcode/__init__.py", "models/research/cognitive_mapping_and_planning/__init__.py", "models/research/cognitive_planning/embedders.py", "models/research/cognitive_planning/envs/active_vision_dataset_env.py", "models/research/cognitive_planning/envs/task_env.py", "models/research/cognitive_planning/envs/util.py", "models/research/cognitive_planning/envs/__init__.py", "models/research/cognitive_planning/label_map_util.py", "models/research/cognitive_planning/policies.py", "models/research/cognitive_planning/preprocessing/cifarnet_preprocessing.py", "models/research/cognitive_planning/preprocessing/inception_preprocessing.py", "models/research/cognitive_planning/preprocessing/lenet_preprocessing.py", "models/research/cognitive_planning/preprocessing/preprocessing_factory.py", "models/research/cognitive_planning/preprocessing/vgg_preprocessing.py", "models/research/cognitive_planning/preprocessing/__init__.py", "models/research/cognitive_planning/standard_fields.py", "models/research/cognitive_planning/string_int_label_map_pb2.py", "models/research/cognitive_planning/tasks.py", "models/research/cognitive_planning/train_supervised_active_vision.py", "models/research/cognitive_planning/visualization_utils.py", "models/research/cognitive_planning/viz_active_vision_dataset_main.py", "models/research/cognitive_planning/__init__.py", "models/research/compression/entropy_coder/all_models/all_models.py", "models/research/compression/entropy_coder/all_models/__init__.py", "models/research/compression/entropy_coder/core/code_loader.py", "models/research/compression/entropy_coder/core/config_helper.py", "models/research/compression/entropy_coder/core/entropy_coder_single.py", "models/research/compression/entropy_coder/core/entropy_coder_train.py", "models/research/compression/entropy_coder/dataset/gen_synthetic_dataset.py", "models/research/compression/entropy_coder/dataset/gen_synthetic_single.py", "models/research/compression/entropy_coder/dataset/synthetic_model.py", "models/research/compression/entropy_coder/lib/blocks.py", "models/research/compression/entropy_coder/lib/blocks_binarizer.py", "models/research/compression/entropy_coder/lib/blocks_entropy_coding.py", "models/research/compression/entropy_coder/lib/blocks_lstm.py", "models/research/compression/entropy_coder/lib/blocks_masked_conv2d.py", "models/research/compression/entropy_coder/lib/blocks_masked_conv2d_lstm.py", "models/research/compression/entropy_coder/lib/blocks_operator.py", "models/research/compression/entropy_coder/lib/blocks_std.py", "models/research/compression/entropy_coder/lib/block_base.py", "models/research/compression/entropy_coder/lib/block_util.py", "models/research/compression/entropy_coder/lib/__init__.py", "models/research/compression/entropy_coder/model/entropy_coder_model.py", "models/research/compression/entropy_coder/model/model_factory.py", "models/research/compression/entropy_coder/model/__init__.py", "models/research/compression/entropy_coder/progressive/progressive.py", "models/research/compression/entropy_coder/progressive/__init__.py", "models/research/compression/entropy_coder/__init__.py", "models/research/compression/image_encoder/decoder.py", "models/research/compression/image_encoder/encoder.py", "models/research/compression/image_encoder/msssim.py", "models/research/cvt_text/base/configure.py", "models/research/cvt_text/base/embeddings.py", "models/research/cvt_text/base/utils.py", "models/research/cvt_text/base/__init__.py", "models/research/cvt_text/corpus_processing/example.py", "models/research/cvt_text/corpus_processing/minibatching.py", "models/research/cvt_text/corpus_processing/scorer.py", "models/research/cvt_text/corpus_processing/unlabeled_data.py", "models/research/cvt_text/corpus_processing/__init__.py", "models/research/cvt_text/cvt.py", "models/research/cvt_text/model/encoder.py", "models/research/cvt_text/model/model_helpers.py", "models/research/cvt_text/model/multitask_model.py", "models/research/cvt_text/model/shared_inputs.py", "models/research/cvt_text/model/task_module.py", "models/research/cvt_text/model/__init__.py", "models/research/cvt_text/preprocessing.py", "models/research/cvt_text/task_specific/task_definitions.py", "models/research/cvt_text/task_specific/word_level/depparse_module.py", "models/research/cvt_text/task_specific/word_level/depparse_scorer.py", "models/research/cvt_text/task_specific/word_level/tagging_module.py", "models/research/cvt_text/task_specific/word_level/tagging_scorers.py", "models/research/cvt_text/task_specific/word_level/tagging_utils.py", "models/research/cvt_text/task_specific/word_level/word_level_data.py", "models/research/cvt_text/task_specific/word_level/word_level_scorer.py", "models/research/cvt_text/task_specific/word_level/__init__.py", "models/research/cvt_text/task_specific/__init__.py", "models/research/cvt_text/training/trainer.py", "models/research/cvt_text/training/training_progress.py", "models/research/cvt_text/training/__init__.py", "models/research/cvt_text/__init__.py", "models/research/deeplab/common.py", "models/research/deeplab/core/dense_prediction_cell.py", "models/research/deeplab/core/feature_extractor.py", "models/research/deeplab/core/preprocess_utils.py", "models/research/deeplab/core/resnet_v1_beta.py", "models/research/deeplab/core/utils.py", "models/research/deeplab/core/xception.py", "models/research/deeplab/core/__init__.py", "models/research/deeplab/datasets/build_ade20k_data.py", "models/research/deeplab/datasets/build_cityscapes_data.py", "models/research/deeplab/datasets/build_data.py", "models/research/deeplab/datasets/build_voc2012_data.py", "models/research/deeplab/datasets/remove_gt_colormap.py", "models/research/deeplab/datasets/segmentation_dataset.py", "models/research/deeplab/datasets/__init__.py", "models/research/deeplab/eval.py", "models/research/deeplab/export_model.py", "models/research/deeplab/input_preprocess.py", "models/research/deeplab/model.py", "models/research/deeplab/train.py", "models/research/deeplab/utils/get_dataset_colormap.py", "models/research/deeplab/utils/input_generator.py", "models/research/deeplab/utils/save_annotation.py", "models/research/deeplab/utils/train_utils.py", "models/research/deeplab/utils/__init__.py", "models/research/deeplab/vis.py", "models/research/deeplab/__init__.py", "models/research/deep_contextual_bandits/bandits/algorithms/bb_alpha_divergence_model.py", "models/research/deep_contextual_bandits/bandits/algorithms/bf_variational_neural_bandit_model.py", "models/research/deep_contextual_bandits/bandits/algorithms/bootstrapped_bnn_sampling.py", "models/research/deep_contextual_bandits/bandits/algorithms/fixed_policy_sampling.py", "models/research/deep_contextual_bandits/bandits/algorithms/linear_full_posterior_sampling.py", "models/research/deep_contextual_bandits/bandits/algorithms/multitask_gp.py", "models/research/deep_contextual_bandits/bandits/algorithms/neural_bandit_model.py", "models/research/deep_contextual_bandits/bandits/algorithms/neural_linear_sampling.py", "models/research/deep_contextual_bandits/bandits/algorithms/parameter_noise_sampling.py", "models/research/deep_contextual_bandits/bandits/algorithms/posterior_bnn_sampling.py", "models/research/deep_contextual_bandits/bandits/algorithms/uniform_sampling.py", "models/research/deep_contextual_bandits/bandits/algorithms/variational_neural_bandit_model.py", "models/research/deep_contextual_bandits/bandits/core/bandit_algorithm.py", "models/research/deep_contextual_bandits/bandits/core/bayesian_nn.py", "models/research/deep_contextual_bandits/bandits/core/contextual_bandit.py", "models/research/deep_contextual_bandits/bandits/core/contextual_dataset.py", "models/research/deep_contextual_bandits/bandits/data/data_sampler.py", "models/research/deep_contextual_bandits/bandits/data/synthetic_data_sampler.py", "models/research/deep_contextual_bandits/example_main.py", "models/research/deep_speech/data/dataset.py", "models/research/deep_speech/data/download.py", "models/research/deep_speech/data/featurizer.py", "models/research/deep_speech/data/__init__.py", "models/research/deep_speech/decoder.py", "models/research/deep_speech/deep_speech.py", "models/research/deep_speech/deep_speech_model.py", "models/research/deep_speech/__init__.py", "models/research/delf/delf/protos/__init__.py", "models/research/delf/delf/python/datum_io.py", "models/research/delf/delf/python/delf_v1.py", "models/research/delf/delf/python/examples/extract_features.py", "models/research/delf/delf/python/examples/match_images.py", "models/research/delf/delf/python/feature_extractor.py", "models/research/delf/delf/python/feature_io.py", "models/research/delf/delf/python/__init__.py", "models/research/delf/delf/__init__.py", "models/research/delf/setup.py", "models/research/domain_adaptation/datasets/dataset_factory.py", "models/research/domain_adaptation/datasets/download_and_convert_mnist_m.py", "models/research/domain_adaptation/datasets/mnist_m.py", "models/research/domain_adaptation/datasets/__init__.py", "models/research/domain_adaptation/domain_separation/dsn.py", "models/research/domain_adaptation/domain_separation/dsn_eval.py", "models/research/domain_adaptation/domain_separation/dsn_train.py", "models/research/domain_adaptation/domain_separation/grl_ops.py", "models/research/domain_adaptation/domain_separation/grl_op_grads.py", "models/research/domain_adaptation/domain_separation/grl_op_shapes.py", "models/research/domain_adaptation/domain_separation/losses.py", "models/research/domain_adaptation/domain_separation/models.py", "models/research/domain_adaptation/domain_separation/utils.py", "models/research/domain_adaptation/domain_separation/__init__.py", "models/research/domain_adaptation/pixel_domain_adaptation/baselines/baseline_eval.py", "models/research/domain_adaptation/pixel_domain_adaptation/baselines/baseline_train.py", "models/research/domain_adaptation/pixel_domain_adaptation/hparams.py", "models/research/domain_adaptation/pixel_domain_adaptation/pixelda_eval.py", "models/research/domain_adaptation/pixel_domain_adaptation/pixelda_losses.py", "models/research/domain_adaptation/pixel_domain_adaptation/pixelda_model.py", "models/research/domain_adaptation/pixel_domain_adaptation/pixelda_preprocess.py", "models/research/domain_adaptation/pixel_domain_adaptation/pixelda_task_towers.py", "models/research/domain_adaptation/pixel_domain_adaptation/pixelda_train.py", "models/research/domain_adaptation/pixel_domain_adaptation/pixelda_utils.py", "models/research/domain_adaptation/__init__.py", "models/research/efficient-hrl/agent.py", "models/research/efficient-hrl/agents/circular_buffer.py", "models/research/efficient-hrl/agents/ddpg_agent.py", "models/research/efficient-hrl/agents/ddpg_networks.py", "models/research/efficient-hrl/agents/__init__.py", "models/research/efficient-hrl/cond_fn.py", "models/research/efficient-hrl/context/context.py", "models/research/efficient-hrl/context/context_transition_functions.py", "models/research/efficient-hrl/context/gin_imports.py", "models/research/efficient-hrl/context/gin_utils.py", "models/research/efficient-hrl/context/rewards_functions.py", "models/research/efficient-hrl/context/samplers.py", "models/research/efficient-hrl/context/__init__.py", "models/research/efficient-hrl/environments/ant.py", "models/research/efficient-hrl/environments/ant_maze_env.py", "models/research/efficient-hrl/environments/create_maze_env.py", "models/research/efficient-hrl/environments/maze_env.py", "models/research/efficient-hrl/environments/maze_env_utils.py", "models/research/efficient-hrl/environments/point.py", "models/research/efficient-hrl/environments/point_maze_env.py", "models/research/efficient-hrl/environments/__init__.py", "models/research/efficient-hrl/eval.py", "models/research/efficient-hrl/run_env.py", "models/research/efficient-hrl/run_eval.py", "models/research/efficient-hrl/run_train.py", "models/research/efficient-hrl/scripts/local_eval.py", "models/research/efficient-hrl/scripts/local_train.py", "models/research/efficient-hrl/train.py", "models/research/efficient-hrl/train_utils.py", "models/research/efficient-hrl/utils/eval_utils.py", "models/research/efficient-hrl/utils/utils.py", "models/research/efficient-hrl/utils/__init__.py", "models/research/fivo/experimental/bounds.py", "models/research/fivo/experimental/data.py", "models/research/fivo/experimental/models.py", "models/research/fivo/experimental/summary_utils.py", "models/research/fivo/experimental/train.py", "models/research/fivo/fivo/bounds.py", "models/research/fivo/fivo/data/calculate_pianoroll_mean.py", "models/research/fivo/fivo/data/create_timit_dataset.py", "models/research/fivo/fivo/data/datasets.py", "models/research/fivo/fivo/data/__init__.py", "models/research/fivo/fivo/ghmm_runners.py", "models/research/fivo/fivo/models/base.py", "models/research/fivo/fivo/models/ghmm.py", "models/research/fivo/fivo/models/srnn.py", "models/research/fivo/fivo/models/vrnn.py", "models/research/fivo/fivo/models/__init__.py", "models/research/fivo/fivo/nested_utils.py", "models/research/fivo/fivo/runners.py", "models/research/fivo/fivo/smc.py", "models/research/fivo/fivo/test_utils.py", "models/research/fivo/fivo/__init__.py", "models/research/fivo/run_fivo.py", "models/research/gan/cifar/data_provider.py", "models/research/gan/cifar/eval.py", "models/research/gan/cifar/networks.py", "models/research/gan/cifar/train.py", "models/research/gan/cifar/util.py", "models/research/gan/cyclegan/data_provider.py", "models/research/gan/cyclegan/inference_demo.py", "models/research/gan/cyclegan/train.py", "models/research/gan/image_compression/data_provider.py", "models/research/gan/image_compression/eval.py", "models/research/gan/image_compression/networks.py", "models/research/gan/image_compression/summaries.py", "models/research/gan/image_compression/train.py", "models/research/gan/mnist/conditional_eval.py", "models/research/gan/mnist/data_provider.py", "models/research/gan/mnist/eval.py", "models/research/gan/mnist/infogan_eval.py", "models/research/gan/mnist/networks.py", "models/research/gan/mnist/train.py", "models/research/gan/mnist/util.py", "models/research/gan/mnist/__init__.py", "models/research/gan/mnist_estimator/train.py", "models/research/gan/pix2pix/networks.py", "models/research/gan/pix2pix/train.py", "models/research/gan/progressive_gan/data_provider.py", "models/research/gan/progressive_gan/layers.py", "models/research/gan/progressive_gan/networks.py", "models/research/gan/progressive_gan/train.py", "models/research/gan/progressive_gan/train_main.py", "models/research/gan/stargan/data_provider.py", "models/research/gan/stargan/layers.py", "models/research/gan/stargan/network.py", "models/research/gan/stargan/ops.py", "models/research/gan/stargan/train.py", "models/research/gan/stargan_estimator/data_provider.py", "models/research/gan/stargan_estimator/train.py", "models/research/global_objectives/loss_layers.py", "models/research/global_objectives/loss_layers_example.py", "models/research/global_objectives/test_all.py", "models/research/global_objectives/util.py", "models/research/im2txt/im2txt/configuration.py", "models/research/im2txt/im2txt/data/build_mscoco_data.py", "models/research/im2txt/im2txt/evaluate.py", "models/research/im2txt/im2txt/inference_utils/caption_generator.py", "models/research/im2txt/im2txt/inference_utils/inference_wrapper_base.py", "models/research/im2txt/im2txt/inference_utils/vocabulary.py", "models/research/im2txt/im2txt/inference_wrapper.py", "models/research/im2txt/im2txt/ops/image_embedding.py", "models/research/im2txt/im2txt/ops/image_processing.py", "models/research/im2txt/im2txt/ops/inputs.py", "models/research/im2txt/im2txt/run_inference.py", "models/research/im2txt/im2txt/show_and_tell_model.py", "models/research/im2txt/im2txt/train.py", "models/research/inception/inception/data/build_imagenet_data.py", "models/research/inception/inception/data/build_image_data.py", "models/research/inception/inception/data/preprocess_imagenet_validation_data.py", "models/research/inception/inception/data/process_bounding_boxes.py", "models/research/inception/inception/dataset.py", "models/research/inception/inception/flowers_data.py", "models/research/inception/inception/flowers_eval.py", "models/research/inception/inception/flowers_train.py", "models/research/inception/inception/imagenet_data.py", "models/research/inception/inception/imagenet_distributed_train.py", "models/research/inception/inception/imagenet_eval.py", "models/research/inception/inception/imagenet_train.py", "models/research/inception/inception/image_processing.py", "models/research/inception/inception/inception_distributed_train.py", "models/research/inception/inception/inception_eval.py", "models/research/inception/inception/inception_model.py", "models/research/inception/inception/inception_train.py", "models/research/inception/inception/slim/inception_model.py", "models/research/inception/inception/slim/losses.py", "models/research/inception/inception/slim/ops.py", "models/research/inception/inception/slim/scopes.py", "models/research/inception/inception/slim/slim.py", "models/research/inception/inception/slim/variables.py", "models/research/keypointnet/main.py", "models/research/keypointnet/tools/gen_tfrecords.py", "models/research/keypointnet/tools/render.py", "models/research/keypointnet/utils.py", "models/research/learned_optimizer/metaopt.py", "models/research/learned_optimizer/metarun.py", "models/research/learned_optimizer/optimizer/coordinatewise_rnn.py", "models/research/learned_optimizer/optimizer/global_learning_rate.py", "models/research/learned_optimizer/optimizer/hierarchical_rnn.py", "models/research/learned_optimizer/optimizer/learning_rate_schedule.py", "models/research/learned_optimizer/optimizer/rnn_cells.py", "models/research/learned_optimizer/optimizer/trainable_adam.py", "models/research/learned_optimizer/optimizer/trainable_optimizer.py", "models/research/learned_optimizer/optimizer/utils.py", "models/research/learned_optimizer/problems/datasets.py", "models/research/learned_optimizer/problems/model_adapter.py", "models/research/learned_optimizer/problems/problem_generator.py", "models/research/learned_optimizer/problems/problem_sets.py", "models/research/learned_optimizer/problems/problem_spec.py", "models/research/learning_to_remember_rare_events/data_utils.py", "models/research/learning_to_remember_rare_events/memory.py", "models/research/learning_to_remember_rare_events/model.py", "models/research/learning_to_remember_rare_events/train.py", "models/research/learning_unsupervised_learning/architectures/common.py", "models/research/learning_unsupervised_learning/architectures/more_local_weight_update.py", "models/research/learning_unsupervised_learning/architectures/__init__.py", "models/research/learning_unsupervised_learning/datasets/common.py", "models/research/learning_unsupervised_learning/datasets/mnist.py", "models/research/learning_unsupervised_learning/datasets/__init__.py", "models/research/learning_unsupervised_learning/evaluation.py", "models/research/learning_unsupervised_learning/meta_objective/linear_regression.py", "models/research/learning_unsupervised_learning/meta_objective/sklearn.py", "models/research/learning_unsupervised_learning/meta_objective/utils.py", "models/research/learning_unsupervised_learning/meta_objective/__init__.py", "models/research/learning_unsupervised_learning/optimizers.py", "models/research/learning_unsupervised_learning/run_eval.py", "models/research/learning_unsupervised_learning/summary_utils.py", "models/research/learning_unsupervised_learning/utils.py", "models/research/learning_unsupervised_learning/variable_replace.py", "models/research/learning_unsupervised_learning/__init__.py", "models/research/lexnet_nc/get_indicative_paths.py", "models/research/lexnet_nc/learn_classifier.py", "models/research/lexnet_nc/learn_path_embeddings.py", "models/research/lexnet_nc/lexnet_common.py", "models/research/lexnet_nc/lexnet_model.py", "models/research/lexnet_nc/path_model.py", "models/research/lfads/distributions.py", "models/research/lfads/lfads.py", "models/research/lfads/plot_lfads.py", "models/research/lfads/run_lfads.py", "models/research/lfads/synth_data/generate_chaotic_rnn_data.py", "models/research/lfads/synth_data/generate_itb_data.py", "models/research/lfads/synth_data/generate_labeled_rnn_data.py", "models/research/lfads/synth_data/synthetic_data_utils.py", "models/research/lfads/utils.py", "models/research/lm_1b/data_utils.py", "models/research/lm_1b/lm_1b_eval.py", "models/research/lm_commonsense/eval.py", "models/research/lm_commonsense/utils.py", "models/research/lstm_object_detection/eval.py", "models/research/lstm_object_detection/evaluator.py", "models/research/lstm_object_detection/inputs/seq_dataset_builder.py", "models/research/lstm_object_detection/inputs/tf_sequence_example_decoder.py", "models/research/lstm_object_detection/lstm/lstm_cells.py", "models/research/lstm_object_detection/lstm/lstm_meta_arch.py", "models/research/lstm_object_detection/lstm/rnn_decoder.py", "models/research/lstm_object_detection/lstm/__init__.py", "models/research/lstm_object_detection/metrics/coco_evaluation_all_frames.py", "models/research/lstm_object_detection/metrics/__init__.py", "models/research/lstm_object_detection/models/lstm_ssd_mobilenet_v1_feature_extractor.py", "models/research/lstm_object_detection/models/__init__.py", "models/research/lstm_object_detection/model_builder.py", "models/research/lstm_object_detection/protos/__init__.py", "models/research/lstm_object_detection/train.py", "models/research/lstm_object_detection/trainer.py", "models/research/lstm_object_detection/utils/config_util.py", "models/research/lstm_object_detection/__init__.py", "models/research/marco/Automated_Marco.py", "models/research/marco/jpeg2json.py", "models/research/maskgan/data/imdb_loader.py", "models/research/maskgan/data/ptb_loader.py", "models/research/maskgan/data/__init__.py", "models/research/maskgan/generate_samples.py", "models/research/maskgan/losses/losses.py", "models/research/maskgan/losses/__init__.py", "models/research/maskgan/models/attention_utils.py", "models/research/maskgan/models/bidirectional.py", "models/research/maskgan/models/bidirectional_vd.py", "models/research/maskgan/models/bidirectional_zaremba.py", "models/research/maskgan/models/cnn.py", "models/research/maskgan/models/critic_vd.py", "models/research/maskgan/models/evaluation_utils.py", "models/research/maskgan/models/feedforward.py", "models/research/maskgan/models/rnn.py", "models/research/maskgan/models/rnn_nas.py", "models/research/maskgan/models/rnn_vd.py", "models/research/maskgan/models/rnn_zaremba.py", "models/research/maskgan/models/rollout.py", "models/research/maskgan/models/seq2seq.py", "models/research/maskgan/models/seq2seq_nas.py", "models/research/maskgan/models/seq2seq_vd.py", "models/research/maskgan/models/seq2seq_zaremba.py", "models/research/maskgan/models/__init__.py", "models/research/maskgan/model_utils/helper.py", "models/research/maskgan/model_utils/model_construction.py", "models/research/maskgan/model_utils/model_losses.py", "models/research/maskgan/model_utils/model_optimization.py", "models/research/maskgan/model_utils/model_utils.py", "models/research/maskgan/model_utils/n_gram.py", "models/research/maskgan/model_utils/variable_mapping.py", "models/research/maskgan/model_utils/__init__.py", "models/research/maskgan/nas_utils/configs.py", "models/research/maskgan/nas_utils/custom_cell.py", "models/research/maskgan/nas_utils/variational_dropout.py", "models/research/maskgan/nas_utils/__init__.py", "models/research/maskgan/pretrain_mask_gan.py", "models/research/maskgan/regularization/variational_dropout.py", "models/research/maskgan/regularization/zoneout.py", "models/research/maskgan/regularization/__init__.py", "models/research/maskgan/sample_shuffler.py", "models/research/maskgan/train_mask_gan.py", "models/research/minigo/coords.py", "models/research/minigo/dualnet.py", "models/research/minigo/dualnet_model.py", "models/research/minigo/evaluation.py", "models/research/minigo/features.py", "models/research/minigo/go.py", "models/research/minigo/gtp_extensions.py", "models/research/minigo/gtp_wrapper.py", "models/research/minigo/mcts.py", "models/research/minigo/minigo.py", "models/research/minigo/model_params.py", "models/research/minigo/preprocessing.py", "models/research/minigo/selfplay_mcts.py", "models/research/minigo/sgf_wrapper.py", "models/research/minigo/strategies.py", "models/research/minigo/symmetries.py", "models/research/minigo/utils.py", "models/research/minigo/__init__.py", "models/research/morph_net/framework/concat_and_slice_regularizers.py", "models/research/morph_net/framework/generic_regularizers.py", "models/research/morph_net/framework/grouping_regularizers.py", "models/research/morph_net/framework/op_regularizer_manager.py", "models/research/morph_net/framework/__init__.py", "models/research/morph_net/network_regularizers/bilinear_cost_utils.py", "models/research/morph_net/network_regularizers/flop_regularizer.py", "models/research/morph_net/network_regularizers/model_size_regularizer.py", "models/research/morph_net/network_regularizers/__init__.py", "models/research/morph_net/op_regularizers/conv_group_lasso_regularizer.py", "models/research/morph_net/op_regularizers/gamma_l1_regularizer.py", "models/research/morph_net/op_regularizers/gamma_mapper.py", "models/research/morph_net/op_regularizers/__init__.py", "models/research/morph_net/testing/op_regularizer_stub.py", "models/research/morph_net/testing/__init__.py", "models/research/morph_net/__init__.py", "models/research/namignizer/data_utils.py", "models/research/namignizer/model.py", "models/research/namignizer/names.py", "models/research/neural_gpu/data_utils.py", "models/research/neural_gpu/neural_gpu.py", "models/research/neural_gpu/neural_gpu_trainer.py", "models/research/neural_gpu/program_utils.py", "models/research/neural_gpu/wmt_utils.py", "models/research/neural_programmer/data_utils.py", "models/research/neural_programmer/model.py", "models/research/neural_programmer/neural_programmer.py", "models/research/neural_programmer/nn_utils.py", "models/research/neural_programmer/parameters.py", "models/research/neural_programmer/wiki_data.py", "models/research/next_frame_prediction/cross_conv/eval.py", "models/research/next_frame_prediction/cross_conv/example_gen.py", "models/research/next_frame_prediction/cross_conv/model.py", "models/research/next_frame_prediction/cross_conv/reader.py", "models/research/next_frame_prediction/cross_conv/sprites_gen.py", "models/research/next_frame_prediction/cross_conv/train.py", "models/research/object_detection/anchor_generators/grid_anchor_generator.py", "models/research/object_detection/anchor_generators/multiple_grid_anchor_generator.py", "models/research/object_detection/anchor_generators/multiscale_grid_anchor_generator.py", "models/research/object_detection/anchor_generators/__init__.py", "models/research/object_detection/box_coders/faster_rcnn_box_coder.py", "models/research/object_detection/box_coders/keypoint_box_coder.py", "models/research/object_detection/box_coders/mean_stddev_box_coder.py", "models/research/object_detection/box_coders/square_box_coder.py", "models/research/object_detection/box_coders/__init__.py", "models/research/object_detection/builders/anchor_generator_builder.py", "models/research/object_detection/builders/box_coder_builder.py", "models/research/object_detection/builders/box_predictor_builder.py", "models/research/object_detection/builders/dataset_builder.py", "models/research/object_detection/builders/graph_rewriter_builder.py", "models/research/object_detection/builders/hyperparams_builder.py", "models/research/object_detection/builders/image_resizer_builder.py", "models/research/object_detection/builders/input_reader_builder.py", "models/research/object_detection/builders/losses_builder.py", "models/research/object_detection/builders/matcher_builder.py", "models/research/object_detection/builders/model_builder.py", "models/research/object_detection/builders/optimizer_builder.py", "models/research/object_detection/builders/post_processing_builder.py", "models/research/object_detection/builders/preprocessor_builder.py", "models/research/object_detection/builders/region_similarity_calculator_builder.py", "models/research/object_detection/builders/__init__.py", "models/research/object_detection/core/anchor_generator.py", "models/research/object_detection/core/balanced_positive_negative_sampler.py", "models/research/object_detection/core/batcher.py", "models/research/object_detection/core/box_coder.py", "models/research/object_detection/core/box_list.py", "models/research/object_detection/core/box_list_ops.py", "models/research/object_detection/core/box_predictor.py", "models/research/object_detection/core/data_decoder.py", "models/research/object_detection/core/data_parser.py", "models/research/object_detection/core/freezable_batch_norm.py", "models/research/object_detection/core/keypoint_ops.py", "models/research/object_detection/core/losses.py", "models/research/object_detection/core/matcher.py", "models/research/object_detection/core/minibatch_sampler.py", "models/research/object_detection/core/model.py", "models/research/object_detection/core/post_processing.py", "models/research/object_detection/core/prefetcher.py", "models/research/object_detection/core/preprocessor.py", "models/research/object_detection/core/preprocessor_cache.py", "models/research/object_detection/core/region_similarity_calculator.py", "models/research/object_detection/core/standard_fields.py", "models/research/object_detection/core/target_assigner.py", "models/research/object_detection/core/__init__.py", "models/research/object_detection/dataset_tools/create_coco_tf_record.py", "models/research/object_detection/dataset_tools/create_kitti_tf_record.py", "models/research/object_detection/dataset_tools/create_oid_tf_record.py", "models/research/object_detection/dataset_tools/create_pascal_tf_record.py", "models/research/object_detection/dataset_tools/create_pet_tf_record.py", "models/research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py", "models/research/object_detection/dataset_tools/oid_tfrecord_creation.py", "models/research/object_detection/dataset_tools/tf_record_creation_util.py", "models/research/object_detection/dataset_tools/__init__.py", "models/research/object_detection/data_decoders/tf_example_decoder.py", "models/research/object_detection/data_decoders/__init__.py", "models/research/object_detection/eval_util.py", "models/research/object_detection/exporter.py", "models/research/object_detection/export_inference_graph.py", "models/research/object_detection/export_tflite_ssd_graph.py", "models/research/object_detection/export_tflite_ssd_graph_lib.py", "models/research/object_detection/inference/detection_inference.py", "models/research/object_detection/inference/infer_detections.py", "models/research/object_detection/inference/__init__.py", "models/research/object_detection/inputs.py", "models/research/object_detection/legacy/eval.py", "models/research/object_detection/legacy/evaluator.py", "models/research/object_detection/legacy/train.py", "models/research/object_detection/legacy/trainer.py", "models/research/object_detection/legacy/__init__.py", "models/research/object_detection/matchers/argmax_matcher.py", "models/research/object_detection/matchers/bipartite_matcher.py", "models/research/object_detection/matchers/__init__.py", "models/research/object_detection/meta_architectures/faster_rcnn_meta_arch.py", "models/research/object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py", "models/research/object_detection/meta_architectures/rfcn_meta_arch.py", "models/research/object_detection/meta_architectures/ssd_meta_arch.py", "models/research/object_detection/meta_architectures/ssd_meta_arch_test_lib.py", "models/research/object_detection/meta_architectures/__init__.py", "models/research/object_detection/metrics/coco_evaluation.py", "models/research/object_detection/metrics/coco_tools.py", "models/research/object_detection/metrics/io_utils.py", "models/research/object_detection/metrics/offline_eval_map_corloc.py", "models/research/object_detection/metrics/oid_od_challenge_evaluation.py", "models/research/object_detection/metrics/oid_od_challenge_evaluation_utils.py", "models/research/object_detection/metrics/oid_vrd_challenge_evaluation.py", "models/research/object_detection/metrics/oid_vrd_challenge_evaluation_utils.py", "models/research/object_detection/metrics/tf_example_parser.py", "models/research/object_detection/metrics/__init__.py", "models/research/object_detection/models/embedded_ssd_mobilenet_v1_feature_extractor.py", "models/research/object_detection/models/faster_rcnn_inception_resnet_v2_feature_extractor.py", "models/research/object_detection/models/faster_rcnn_inception_v2_feature_extractor.py", "models/research/object_detection/models/faster_rcnn_mobilenet_v1_feature_extractor.py", "models/research/object_detection/models/faster_rcnn_nas_feature_extractor.py", "models/research/object_detection/models/faster_rcnn_pnas_feature_extractor.py", "models/research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py", "models/research/object_detection/models/feature_map_generators.py", "models/research/object_detection/models/keras_applications/mobilenet_v2.py", "models/research/object_detection/models/keras_applications/__init__.py", "models/research/object_detection/models/ssd_inception_v2_feature_extractor.py", "models/research/object_detection/models/ssd_inception_v3_feature_extractor.py", "models/research/object_detection/models/ssd_mobilenet_v1_feature_extractor.py", "models/research/object_detection/models/ssd_mobilenet_v1_fpn_feature_extractor.py", "models/research/object_detection/models/ssd_mobilenet_v1_ppn_feature_extractor.py", "models/research/object_detection/models/ssd_mobilenet_v2_feature_extractor.py", "models/research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor.py", "models/research/object_detection/models/ssd_mobilenet_v2_keras_feature_extractor.py", "models/research/object_detection/models/ssd_pnasnet_feature_extractor.py", "models/research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor.py", "models/research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py", "models/research/object_detection/models/ssd_resnet_v1_ppn_feature_extractor.py", "models/research/object_detection/models/ssd_resnet_v1_ppn_feature_extractor_testbase.py", "models/research/object_detection/models/__init__.py", "models/research/object_detection/model_hparams.py", "models/research/object_detection/model_lib.py", "models/research/object_detection/model_main.py", "models/research/object_detection/model_tpu_main.py", "models/research/object_detection/predictors/convolutional_box_predictor.py", "models/research/object_detection/predictors/convolutional_keras_box_predictor.py", "models/research/object_detection/predictors/heads/box_head.py", "models/research/object_detection/predictors/heads/class_head.py", "models/research/object_detection/predictors/heads/head.py", "models/research/object_detection/predictors/heads/keras_box_head.py", "models/research/object_detection/predictors/heads/keras_class_head.py", "models/research/object_detection/predictors/heads/keras_mask_head.py", "models/research/object_detection/predictors/heads/keypoint_head.py", "models/research/object_detection/predictors/heads/mask_head.py", "models/research/object_detection/predictors/heads/__init__.py", "models/research/object_detection/predictors/mask_rcnn_box_predictor.py", "models/research/object_detection/predictors/rfcn_box_predictor.py", "models/research/object_detection/predictors/__init__.py", "models/research/object_detection/protos/__init__.py", "models/research/object_detection/utils/category_util.py", "models/research/object_detection/utils/config_util.py", "models/research/object_detection/utils/context_manager.py", "models/research/object_detection/utils/dataset_util.py", "models/research/object_detection/utils/json_utils.py", "models/research/object_detection/utils/label_map_util.py", "models/research/object_detection/utils/learning_schedules.py", "models/research/object_detection/utils/metrics.py", "models/research/object_detection/utils/np_box_list.py", "models/research/object_detection/utils/np_box_list_ops.py", "models/research/object_detection/utils/np_box_mask_list.py", "models/research/object_detection/utils/np_box_mask_list_ops.py", "models/research/object_detection/utils/np_box_ops.py", "models/research/object_detection/utils/np_mask_ops.py", "models/research/object_detection/utils/object_detection_evaluation.py", "models/research/object_detection/utils/ops.py", "models/research/object_detection/utils/per_image_evaluation.py", "models/research/object_detection/utils/per_image_vrd_evaluation.py", "models/research/object_detection/utils/shape_utils.py", "models/research/object_detection/utils/static_shape.py", "models/research/object_detection/utils/test_case.py", "models/research/object_detection/utils/test_utils.py", "models/research/object_detection/utils/variables_helper.py", "models/research/object_detection/utils/visualization_utils.py", "models/research/object_detection/utils/vrd_evaluation.py", "models/research/object_detection/utils/__init__.py", "models/research/object_detection/__init__.py", "models/research/pcl_rl/baseline.py", "models/research/pcl_rl/controller.py", "models/research/pcl_rl/env_spec.py", "models/research/pcl_rl/expert_paths.py", "models/research/pcl_rl/full_episode_objective.py", "models/research/pcl_rl/gym_wrapper.py", "models/research/pcl_rl/model.py", "models/research/pcl_rl/objective.py", "models/research/pcl_rl/optimizers.py", "models/research/pcl_rl/policy.py", "models/research/pcl_rl/replay_buffer.py", "models/research/pcl_rl/trainer.py", "models/research/pcl_rl/trust_region.py", "models/research/ptn/eval_ptn.py", "models/research/ptn/eval_rotator.py", "models/research/ptn/input_generator.py", "models/research/ptn/losses.py", "models/research/ptn/metrics.py", "models/research/ptn/model_ptn.py", "models/research/ptn/model_rotator.py", "models/research/ptn/model_voxel_generation.py", "models/research/ptn/nets/deeprotator_factory.py", "models/research/ptn/nets/im2vox_factory.py", "models/research/ptn/nets/perspective_projector.py", "models/research/ptn/nets/perspective_transform.py", "models/research/ptn/nets/ptn_encoder.py", "models/research/ptn/nets/ptn_im_decoder.py", "models/research/ptn/nets/ptn_rotator.py", "models/research/ptn/nets/ptn_vox_decoder.py", "models/research/ptn/pretrain_rotator.py", "models/research/ptn/train_ptn.py", "models/research/ptn/utils.py", "models/research/qa_kg/exp_1_hop/config.py", "models/research/qa_kg/exp_1_hop/test.py", "models/research/qa_kg/exp_1_hop/train_gt_layout.py", "models/research/qa_kg/model_n2nmn/assembler.py", "models/research/qa_kg/model_n2nmn/model.py", "models/research/qa_kg/model_n2nmn/modules.py", "models/research/qa_kg/model_n2nmn/netgen_att.py", "models/research/qa_kg/model_n2nmn/__init__.py", "models/research/qa_kg/util/data_reader.py", "models/research/qa_kg/util/misc.py", "models/research/qa_kg/util/nn.py", "models/research/qa_kg/util/__init__.py", "models/research/real_nvp/celeba_formatting.py", "models/research/real_nvp/imnet_formatting.py", "models/research/real_nvp/lsun_formatting.py", "models/research/real_nvp/real_nvp_multiscale_dataset.py", "models/research/real_nvp/real_nvp_utils.py", "models/research/real_nvp/__init__.py", "models/research/rebar/config.py", "models/research/rebar/datasets.py", "models/research/rebar/download_data.py", "models/research/rebar/logger.py", "models/research/rebar/rebar.py", "models/research/rebar/rebar_train.py", "models/research/rebar/utils.py", "models/research/resnet/cifar_input.py", "models/research/resnet/resnet_main.py", "models/research/resnet/resnet_model.py", "models/research/sentiment_analysis/data/dataset.py", "models/research/sentiment_analysis/data/imdb.py", "models/research/sentiment_analysis/data/util.py", "models/research/sentiment_analysis/data/__init__.py", "models/research/sentiment_analysis/sentiment_main.py", "models/research/sentiment_analysis/sentiment_model.py", "models/research/sentiment_analysis/__init__.py", "models/research/seq2species/build_model.py", "models/research/seq2species/configuration.py", "models/research/seq2species/input.py", "models/research/seq2species/protos/__init__.py", "models/research/seq2species/run_training.py", "models/research/seq2species/seq2label_utils.py", "models/research/seq2species/test_utils.py", "models/research/setup.py", "models/research/skip_thoughts/skip_thoughts/configuration.py", "models/research/skip_thoughts/skip_thoughts/data/preprocess_dataset.py", "models/research/skip_thoughts/skip_thoughts/data/special_words.py", "models/research/skip_thoughts/skip_thoughts/data/__init__.py", "models/research/skip_thoughts/skip_thoughts/encoder_manager.py", "models/research/skip_thoughts/skip_thoughts/evaluate.py", "models/research/skip_thoughts/skip_thoughts/ops/gru_cell.py", "models/research/skip_thoughts/skip_thoughts/ops/input_ops.py", "models/research/skip_thoughts/skip_thoughts/ops/__init__.py", "models/research/skip_thoughts/skip_thoughts/skip_thoughts_encoder.py", "models/research/skip_thoughts/skip_thoughts/skip_thoughts_model.py", "models/research/skip_thoughts/skip_thoughts/track_perplexity.py", "models/research/skip_thoughts/skip_thoughts/train.py", "models/research/skip_thoughts/skip_thoughts/vocabulary_expansion.py", "models/research/skip_thoughts/skip_thoughts/__init__.py", "models/research/slim/datasets/build_imagenet_data.py", "models/research/slim/datasets/cifar10.py", "models/research/slim/datasets/dataset_factory.py", "models/research/slim/datasets/dataset_utils.py", "models/research/slim/datasets/download_and_convert_cifar10.py", "models/research/slim/datasets/download_and_convert_flowers.py", "models/research/slim/datasets/download_and_convert_mnist.py", "models/research/slim/datasets/flowers.py", "models/research/slim/datasets/imagenet.py", "models/research/slim/datasets/mnist.py", "models/research/slim/datasets/preprocess_imagenet_validation_data.py", "models/research/slim/datasets/process_bounding_boxes.py", "models/research/slim/datasets/__init__.py", "models/research/slim/deployment/model_deploy.py", "models/research/slim/deployment/__init__.py", "models/research/slim/download_and_convert_data.py", "models/research/slim/eval_image_classifier.py", "models/research/slim/export_inference_graph.py", "models/research/slim/nets/alexnet.py", "models/research/slim/nets/cifarnet.py", "models/research/slim/nets/cyclegan.py", "models/research/slim/nets/dcgan.py", "models/research/slim/nets/i3d.py", "models/research/slim/nets/i3d_utils.py", "models/research/slim/nets/inception.py", "models/research/slim/nets/inception_resnet_v2.py", "models/research/slim/nets/inception_utils.py", "models/research/slim/nets/inception_v1.py", "models/research/slim/nets/inception_v2.py", "models/research/slim/nets/inception_v3.py", "models/research/slim/nets/inception_v4.py", "models/research/slim/nets/lenet.py", "models/research/slim/nets/mobilenet/conv_blocks.py", "models/research/slim/nets/mobilenet/mobilenet.py", "models/research/slim/nets/mobilenet/mobilenet_v2.py", "models/research/slim/nets/mobilenet/__init__.py", "models/research/slim/nets/mobilenet_v1.py", "models/research/slim/nets/mobilenet_v1_eval.py", "models/research/slim/nets/mobilenet_v1_train.py", "models/research/slim/nets/nasnet/nasnet.py", "models/research/slim/nets/nasnet/nasnet_utils.py", "models/research/slim/nets/nasnet/pnasnet.py", "models/research/slim/nets/nasnet/__init__.py", "models/research/slim/nets/nets_factory.py", "models/research/slim/nets/overfeat.py", "models/research/slim/nets/pix2pix.py", "models/research/slim/nets/resnet_utils.py", "models/research/slim/nets/resnet_v1.py", "models/research/slim/nets/resnet_v2.py", "models/research/slim/nets/s3dg.py", "models/research/slim/nets/vgg.py", "models/research/slim/nets/__init__.py", "models/research/slim/preprocessing/cifarnet_preprocessing.py", "models/research/slim/preprocessing/inception_preprocessing.py", "models/research/slim/preprocessing/lenet_preprocessing.py", "models/research/slim/preprocessing/preprocessing_factory.py", "models/research/slim/preprocessing/vgg_preprocessing.py", "models/research/slim/preprocessing/__init__.py", "models/research/slim/setup.py", "models/research/slim/train_image_classifier.py", "models/research/slim/__init__.py", "models/research/steve/agent.py", "models/research/steve/config.py", "models/research/steve/envwrap.py", "models/research/steve/learner.py", "models/research/steve/master.py", "models/research/steve/nn.py", "models/research/steve/replay.py", "models/research/steve/toy_demo.py", "models/research/steve/util.py", "models/research/steve/valuerl.py", "models/research/steve/valuerl_learner.py", "models/research/steve/visualizer.py", "models/research/steve/worldmodel.py", "models/research/steve/worldmodel_learner.py", "models/research/street/python/decoder.py", "models/research/street/python/errorcounter.py", "models/research/street/python/fsns_urls.py", "models/research/street/python/nn_ops.py", "models/research/street/python/shapes.py", "models/research/street/python/vgslspecs.py", "models/research/street/python/vgsl_eval.py", "models/research/street/python/vgsl_input.py", "models/research/street/python/vgsl_model.py", "models/research/street/python/vgsl_train.py", "models/research/struct2depth/alignment.py", "models/research/struct2depth/gen_data_city.py", "models/research/struct2depth/gen_data_kitti.py", "models/research/struct2depth/inference.py", "models/research/struct2depth/model.py", "models/research/struct2depth/nets.py", "models/research/struct2depth/optimize.py", "models/research/struct2depth/project.py", "models/research/struct2depth/reader.py", "models/research/struct2depth/train.py", "models/research/struct2depth/util.py", "models/research/swivel/glove_to_shards.py", "models/research/swivel/nearest.py", "models/research/swivel/prep.py", "models/research/swivel/swivel.py", "models/research/swivel/text2bin.py", "models/research/swivel/vecs.py", "models/research/swivel/wordsim.py", "models/research/syntaxnet/dragnn/config_builder/__init__.py", "models/research/syntaxnet/dragnn/conll2017/make_parser_spec.py", "models/research/syntaxnet/dragnn/python/biaffine_units.py", "models/research/syntaxnet/dragnn/python/bulk_component.py", "models/research/syntaxnet/dragnn/python/component.py", "models/research/syntaxnet/dragnn/python/composite_optimizer.py", "models/research/syntaxnet/dragnn/python/digraph_ops.py", "models/research/syntaxnet/dragnn/python/dragnn_model_saver.py", "models/research/syntaxnet/dragnn/python/dragnn_model_saver_lib.py", "models/research/syntaxnet/dragnn/python/dragnn_ops.py", "models/research/syntaxnet/dragnn/python/evaluation.py", "models/research/syntaxnet/dragnn/python/graph_builder.py", "models/research/syntaxnet/dragnn/python/lexicon.py", "models/research/syntaxnet/dragnn/python/load_dragnn_cc_impl.py", "models/research/syntaxnet/dragnn/python/load_mst_cc_impl.py", "models/research/syntaxnet/dragnn/python/mst_ops.py", "models/research/syntaxnet/dragnn/python/mst_units.py", "models/research/syntaxnet/dragnn/python/network_units.py", "models/research/syntaxnet/dragnn/python/render_parse_tree_graphviz.py", "models/research/syntaxnet/dragnn/python/render_spec_with_graphviz.py", "models/research/syntaxnet/dragnn/python/runtime_support.py", "models/research/syntaxnet/dragnn/python/sentence_io.py", "models/research/syntaxnet/dragnn/python/spec_builder.py", "models/research/syntaxnet/dragnn/python/trainer_lib.py", "models/research/syntaxnet/dragnn/python/transformer_units.py", "models/research/syntaxnet/dragnn/python/visualization.py", "models/research/syntaxnet/dragnn/python/wrapped_units.py", "models/research/syntaxnet/dragnn/tools/build_pip_package.py", "models/research/syntaxnet/dragnn/tools/conll_checkpoint_converter.py", "models/research/syntaxnet/dragnn/tools/evaluator.py", "models/research/syntaxnet/dragnn/tools/legacy_parse_to_conll.py", "models/research/syntaxnet/dragnn/tools/model_trainer.py", "models/research/syntaxnet/dragnn/tools/oss_notebook_launcher.py", "models/research/syntaxnet/dragnn/tools/oss_setup.py", "models/research/syntaxnet/dragnn/tools/parser_trainer.py", "models/research/syntaxnet/dragnn/tools/parse_to_conll.py", "models/research/syntaxnet/dragnn/tools/segmenter-evaluator.py", "models/research/syntaxnet/dragnn/tools/segmenter_trainer.py", "models/research/syntaxnet/dragnn/tools/trainer.py", "models/research/syntaxnet/dragnn/__init__.py", "models/research/syntaxnet/examples/dragnn/tutorial_1.py", "models/research/syntaxnet/examples/dragnn/tutorial_2.py", "models/research/syntaxnet/syntaxnet/conll2tree.py", "models/research/syntaxnet/syntaxnet/graph_builder.py", "models/research/syntaxnet/syntaxnet/load_parser_ops.py", "models/research/syntaxnet/syntaxnet/parser_eval.py", "models/research/syntaxnet/syntaxnet/parser_trainer.py", "models/research/syntaxnet/syntaxnet/structured_graph_builder.py", "models/research/syntaxnet/syntaxnet/syntaxnet_ops.py", "models/research/syntaxnet/syntaxnet/test_flags.py", "models/research/syntaxnet/syntaxnet/util/check.py", "models/research/syntaxnet/syntaxnet/util/registry.py", "models/research/syntaxnet/syntaxnet/util/registry_test_base.py", "models/research/syntaxnet/syntaxnet/util/registry_test_impl.py", "models/research/syntaxnet/syntaxnet/util/resources.py", "models/research/tcn/alignment.py", "models/research/tcn/dataset/images_to_videos.py", "models/research/tcn/dataset/videos_to_tfrecords.py", "models/research/tcn/dataset/webcam.py", "models/research/tcn/data_providers.py", "models/research/tcn/download_pretrained.py", "models/research/tcn/estimators/base_estimator.py", "models/research/tcn/estimators/get_estimator.py", "models/research/tcn/estimators/mvtcn_estimator.py", "models/research/tcn/estimators/svtcn_estimator.py", "models/research/tcn/estimators/svtcn_loss.py", "models/research/tcn/eval.py", "models/research/tcn/generate_videos.py", "models/research/tcn/labeled_eval.py", "models/research/tcn/model.py", "models/research/tcn/preprocessing.py", "models/research/tcn/train.py", "models/research/tcn/utils/luatables.py", "models/research/tcn/utils/progress.py", "models/research/tcn/utils/util.py", "models/research/tcn/visualize_embeddings.py", "models/research/tensorrt/tensorrt.py", "models/research/textsum/batch_reader.py", "models/research/textsum/beam_search.py", "models/research/textsum/data.py", "models/research/textsum/data_convert_example.py", "models/research/textsum/seq2seq_attention.py", "models/research/textsum/seq2seq_attention_decode.py", "models/research/textsum/seq2seq_attention_model.py", "models/research/textsum/seq2seq_lib.py", "models/research/transformer/cluttered_mnist.py", "models/research/transformer/example.py", "models/research/transformer/spatial_transformer.py", "models/research/transformer/tf_utils.py", "models/research/vid2depth/dataset/dataset_loader.py", "models/research/vid2depth/dataset/gen_data.py", "models/research/vid2depth/dataset/__init__.py", "models/research/vid2depth/inference.py", "models/research/vid2depth/model.py", "models/research/vid2depth/nets.py", "models/research/vid2depth/ops/icp_grad.py", "models/research/vid2depth/ops/icp_op.py", "models/research/vid2depth/ops/icp_train_demo.py", "models/research/vid2depth/ops/icp_util.py", "models/research/vid2depth/ops/__init__.py", "models/research/vid2depth/project.py", "models/research/vid2depth/reader.py", "models/research/vid2depth/train.py", "models/research/vid2depth/util.py", "models/research/video_prediction/lstm_ops.py", "models/research/video_prediction/prediction_input.py", "models/research/video_prediction/prediction_model.py", "models/research/video_prediction/prediction_train.py", "models/samples/cookbook/regression/automobile_data.py", "models/samples/cookbook/regression/custom_regression.py", "models/samples/cookbook/regression/dnn_regression.py", "models/samples/cookbook/regression/linear_regression.py", "models/samples/cookbook/regression/linear_regression_categorical.py", "models/samples/cookbook/regression/__init__.py", "models/samples/core/get_started/custom_estimator.py", "models/samples/core/get_started/iris_data.py", "models/samples/core/get_started/premade_estimator.py", "models/samples/languages/java/label_image/download.py", "models/samples/languages/java/training/model/create_graph.py", "models/samples/outreach/blogs/blog_custom_estimators.py", "models/samples/outreach/blogs/blog_estimators_dataset.py", "models/tutorials/embedding/word2vec.py", "models/tutorials/embedding/word2vec_optimized.py", "models/tutorials/embedding/__init__.py", "models/tutorials/image/alexnet/alexnet_benchmark.py", "models/tutorials/image/alexnet/__init__.py", "models/tutorials/image/cifar10/cifar10.py", "models/tutorials/image/cifar10/cifar10_eval.py", "models/tutorials/image/cifar10/cifar10_input.py", "models/tutorials/image/cifar10/cifar10_multi_gpu_train.py", "models/tutorials/image/cifar10/cifar10_train.py", "models/tutorials/image/cifar10/__init__.py", "models/tutorials/image/cifar10_estimator/cifar10.py", "models/tutorials/image/cifar10_estimator/cifar10_main.py", "models/tutorials/image/cifar10_estimator/cifar10_model.py", "models/tutorials/image/cifar10_estimator/cifar10_utils.py", "models/tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py", "models/tutorials/image/cifar10_estimator/model_base.py", "models/tutorials/image/cifar10_estimator/__init__.py", "models/tutorials/image/imagenet/classify_image.py", "models/tutorials/image/mnist/convolutional.py", "models/tutorials/image/mnist/__init__.py", "models/tutorials/image/__init__.py", "models/tutorials/rnn/ptb/ptb_word_lm.py", "models/tutorials/rnn/ptb/reader.py", "models/tutorials/rnn/ptb/util.py", "models/tutorials/rnn/ptb/__init__.py", "models/tutorials/rnn/quickdraw/create_dataset.py", "models/tutorials/rnn/quickdraw/train_model.py", "models/tutorials/rnn/__init__.py", "models/tutorials/__init__.py" ],
  "cells" : [ {
    "src" : 609,
    "dest" : 625,
    "values" : {
      "P10" : 7.0
    }
  }, {
    "src" : 609,
    "dest" : 1187,
    "values" : {
      "P10" : 28.0
    }
  }, {
    "src" : 609,
    "dest" : 45,
    "values" : {
      "P10" : 7.0
    }
  }, {
    "src" : 609,
    "dest" : 478,
    "values" : {
      "P10" : 7.0
    }
  }, {
    "src" : 609,
    "dest" : 671,
    "values" : {
      "P10" : 21.0
    }
  }, {
    "src" : 322,
    "dest" : 228,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 322,
    "dest" : 167,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 322,
    "dest" : 327,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 322,
    "dest" : 155,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 322,
    "dest" : 156,
    "values" : {
      "P10" : 8.0
    }
  }, {
    "src" : 322,
    "dest" : 157,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 322,
    "dest" : 734,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 322,
    "dest" : 1007,
    "values" : {
      "P10" : 8.0
    }
  }, {
    "src" : 323,
    "dest" : 625,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 323,
    "dest" : 1187,
    "values" : {
      "P10" : 8.0
    }
  }, {
    "src" : 323,
    "dest" : 228,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 323,
    "dest" : 167,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 323,
    "dest" : 327,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 323,
    "dest" : 155,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 323,
    "dest" : 156,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 323,
    "dest" : 333,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 323,
    "dest" : 157,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 323,
    "dest" : 734,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 323,
    "dest" : 671,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 323,
    "dest" : 1007,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 612,
    "dest" : 625,
    "values" : {
      "P10" : 12.0
    }
  }, {
    "src" : 612,
    "dest" : 1187,
    "values" : {
      "P10" : 48.0
    }
  }, {
    "src" : 612,
    "dest" : 45,
    "values" : {
      "P10" : 12.0
    }
  }, {
    "src" : 612,
    "dest" : 478,
    "values" : {
      "P10" : 12.0
    }
  }, {
    "src" : 612,
    "dest" : 671,
    "values" : {
      "P10" : 36.0
    }
  }, {
    "src" : 772,
    "dest" : 848,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 772,
    "dest" : 1105,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 772,
    "dest" : 771,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 772,
    "dest" : 675,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 772,
    "dest" : 838,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 772,
    "dest" : 571,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 613,
    "dest" : 625,
    "values" : {
      "P10" : 5.0
    }
  }, {
    "src" : 613,
    "dest" : 1187,
    "values" : {
      "P10" : 20.0
    }
  }, {
    "src" : 613,
    "dest" : 45,
    "values" : {
      "P10" : 5.0
    }
  }, {
    "src" : 613,
    "dest" : 478,
    "values" : {
      "P10" : 5.0
    }
  }, {
    "src" : 613,
    "dest" : 671,
    "values" : {
      "P10" : 15.0
    }
  }, {
    "src" : 614,
    "dest" : 625,
    "values" : {
      "P10" : 24.0
    }
  }, {
    "src" : 614,
    "dest" : 1187,
    "values" : {
      "P10" : 96.0
    }
  }, {
    "src" : 614,
    "dest" : 45,
    "values" : {
      "P10" : 24.0
    }
  }, {
    "src" : 614,
    "dest" : 478,
    "values" : {
      "P10" : 24.0
    }
  }, {
    "src" : 614,
    "dest" : 671,
    "values" : {
      "P10" : 72.0
    }
  }, {
    "src" : 615,
    "dest" : 625,
    "values" : {
      "P10" : 5.0
    }
  }, {
    "src" : 615,
    "dest" : 1187,
    "values" : {
      "P10" : 20.0
    }
  }, {
    "src" : 615,
    "dest" : 45,
    "values" : {
      "P10" : 5.0
    }
  }, {
    "src" : 615,
    "dest" : 478,
    "values" : {
      "P10" : 5.0
    }
  }, {
    "src" : 615,
    "dest" : 671,
    "values" : {
      "P10" : 15.0
    }
  }, {
    "src" : 328,
    "dest" : 1187,
    "values" : {
      "P10" : 16.0
    }
  }, {
    "src" : 328,
    "dest" : 323,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 328,
    "dest" : 228,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 328,
    "dest" : 167,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 328,
    "dest" : 327,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 328,
    "dest" : 333,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 328,
    "dest" : 1007,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 328,
    "dest" : 625,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 328,
    "dest" : 155,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 328,
    "dest" : 156,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 328,
    "dest" : 157,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 328,
    "dest" : 734,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 328,
    "dest" : 671,
    "values" : {
      "P10" : 12.0
    }
  }, {
    "src" : 333,
    "dest" : 625,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 333,
    "dest" : 1187,
    "values" : {
      "P10" : 8.0
    }
  }, {
    "src" : 333,
    "dest" : 323,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 333,
    "dest" : 228,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 333,
    "dest" : 167,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 333,
    "dest" : 327,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 333,
    "dest" : 155,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 333,
    "dest" : 156,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 333,
    "dest" : 157,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 333,
    "dest" : 734,
    "values" : {
      "P10" : 3.0
    }
  }, {
    "src" : 333,
    "dest" : 671,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 333,
    "dest" : 1007,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 526,
    "dest" : 529,
    "values" : {
      "P10" : 4.0
    }
  }, {
    "src" : 526,
    "dest" : 530,
    "values" : {
      "P10" : 36.0
    }
  }, {
    "src" : 944,
    "dest" : 576,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 944,
    "dest" : 721,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 944,
    "dest" : 50,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 944,
    "dest" : 569,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 944,
    "dest" : 345,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 944,
    "dest" : 57,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 944,
    "dest" : 746,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 944,
    "dest" : 572,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 944,
    "dest" : 717,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 600,
    "dest" : 625,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 600,
    "dest" : 1187,
    "values" : {
      "P10" : 24.0
    }
  }, {
    "src" : 600,
    "dest" : 45,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 600,
    "dest" : 478,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 600,
    "dest" : 671,
    "values" : {
      "P10" : 18.0
    }
  }, {
    "src" : 601,
    "dest" : 625,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 601,
    "dest" : 1187,
    "values" : {
      "P10" : 24.0
    }
  }, {
    "src" : 601,
    "dest" : 45,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 601,
    "dest" : 478,
    "values" : {
      "P10" : 6.0
    }
  }, {
    "src" : 601,
    "dest" : 671,
    "values" : {
      "P10" : 18.0
    }
  }, {
    "src" : 570,
    "dest" : 576,
    "values" : {
      "P10" : 2.0
    }
  }, {
    "src" : 570,
    "dest" : 721,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 570,
    "dest" : 50,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 570,
    "dest" : 569,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 570,
    "dest" : 345,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 570,
    "dest" : 57,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 570,
    "dest" : 746,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 570,
    "dest" : 572,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 570,
    "dest" : 717,
    "values" : {
      "P10" : 1.0
    }
  }, {
    "src" : 604,
    "dest" : 625,
    "values" : {
      "P10" : 7.0
    }
  }, {
    "src" : 604,
    "dest" : 1187,
    "values" : {
      "P10" : 28.0
    }
  }, {
    "src" : 604,
    "dest" : 45,
    "values" : {
      "P10" : 7.0
    }
  }, {
    "src" : 604,
    "dest" : 478,
    "values" : {
      "P10" : 7.0
    }
  }, {
    "src" : 604,
    "dest" : 671,
    "values" : {
      "P10" : 21.0
    }
  }, {
    "src" : 607,
    "dest" : 625,
    "values" : {
      "P10" : 14.0
    }
  }, {
    "src" : 607,
    "dest" : 1187,
    "values" : {
      "P10" : 56.0
    }
  }, {
    "src" : 607,
    "dest" : 45,
    "values" : {
      "P10" : 14.0
    }
  }, {
    "src" : 607,
    "dest" : 478,
    "values" : {
      "P10" : 14.0
    }
  }, {
    "src" : 607,
    "dest" : 671,
    "values" : {
      "P10" : 42.0
    }
  } ]
}